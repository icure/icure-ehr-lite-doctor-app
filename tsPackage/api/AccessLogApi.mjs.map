{"version":3,"file":"AccessLogApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/AccessLogApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {AccessLogShareOptions} from '../crypto/entities/AccessLogShareOptions.mjs';\nimport {SecretIdUseOption} from '../crypto/entities/SecretIdUseOption.mjs';\nimport {AccessLog, DecryptedAccessLog, EncryptedAccessLog} from '../model/AccessLog.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {Patient} from '../model/Patient.mjs';\nimport {User} from '../model/User.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {AccessLevel} from '../model/embed/AccessLevel.mjs';\nimport {HexString} from '../model/specializations/HexString.mjs';\nimport {AccessLogFlavouredApi} from './AccessLogFlavouredApi.mjs';\n\n\nexport interface AccessLogApi {\n\n\tencrypted: AccessLogFlavouredApi<EncryptedAccessLog>;\n\n\ttryAndRecover: AccessLogFlavouredApi<AccessLog>;\n\n\tcreateAccessLog(entity: DecryptedAccessLog): Promise<DecryptedAccessLog>;\n\n\twithEncryptionMetadata(base: DecryptedAccessLog | undefined, patient: Patient,\n\t\t\toptions?: { user?: User | undefined, delegates?: { [ key: string ]: AccessLevel }, secretId?: SecretIdUseOption }): Promise<DecryptedAccessLog>;\n\n\tgetEncryptionKeysOf(accessLog: AccessLog): Promise<Array<HexString>>;\n\n\thasWriteAccess(accessLog: AccessLog): Promise<boolean>;\n\n\tdecryptPatientIdOf(accessLog: AccessLog): Promise<Array<string>>;\n\n\tcreateDelegationDeAnonymizationMetadata(entity: AccessLog,\n\t\t\tdelegates: Array<string>): Promise<void>;\n\n\tdecrypt(accessLog: EncryptedAccessLog): Promise<DecryptedAccessLog>;\n\n\ttryDecrypt(accessLog: EncryptedAccessLog): Promise<AccessLog>;\n\n\tmatchAccessLogsBy(filter: FilterOptions<AccessLog>): Promise<Array<string>>;\n\n\tmatchAccessLogsBySorted(filter: SortableFilterOptions<AccessLog>): Promise<Array<string>>;\n\n\tdeleteAccessLogUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteAccessLogsUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteAccessLogById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteAccessLogsByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeAccessLogById(id: string, rev: string): Promise<void>;\n\n\tdeleteAccessLog(accessLog: AccessLog): Promise<DocIdentifier>;\n\n\tdeleteAccessLogs(accessLogs: Array<AccessLog>): Promise<Array<DocIdentifier>>;\n\n\tpurgeAccessLog(accessLog: AccessLog): Promise<void>;\n\n\tshareWith(delegateId: string, accessLog: DecryptedAccessLog,\n\t\t\toptions?: { options?: AccessLogShareOptions | undefined }): Promise<DecryptedAccessLog>;\n\n\tshareWithMany(accessLog: DecryptedAccessLog,\n\t\t\tdelegates: { [ key: string ]: AccessLogShareOptions }): Promise<DecryptedAccessLog>;\n\n\tfindAccessLogsByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<DecryptedAccessLog>>;\n\n\tfilterAccessLogsBy(filter: FilterOptions<AccessLog>): Promise<PaginatedListIterator<DecryptedAccessLog>>;\n\n\tfilterAccessLogsBySorted(filter: SortableFilterOptions<AccessLog>): Promise<PaginatedListIterator<DecryptedAccessLog>>;\n\n\tundeleteAccessLogById(id: string, rev: string): Promise<DecryptedAccessLog>;\n\n\tundeleteAccessLog(accessLog: AccessLog): Promise<DecryptedAccessLog>;\n\n\tmodifyAccessLog(entity: DecryptedAccessLog): Promise<DecryptedAccessLog>;\n\n\tgetAccessLog(entityId: string): Promise<DecryptedAccessLog>;\n\n\tgetAccessLogs(entityIds: Array<string>): Promise<Array<DecryptedAccessLog>>;\n\n\tfindAccessLogsBy(\n\t\t\tfromEpoch: number | undefined,\n\t\t\ttoEpoch: number | undefined,\n\t\t\tstartKey: number | undefined,\n\t\t\tstartDocumentId: string | undefined,\n\t\t\tlimit: number | undefined\n\t): Promise<PaginatedList<DecryptedAccessLog>>;\n\n\tfindAccessLogsByUserAfterDate(userId: string,\n\t\t\toptions?: { accessType?: string | undefined, startDate?: number | undefined, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedList<DecryptedAccessLog>>;\n\n\tfindAccessLogsInGroup(groupId: string,\n\t\t\toptions?: { fromEpoch?: number | undefined, toEpoch?: number | undefined, startKey?: number | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<DecryptedAccessLog>>;\n\n}\n"]}