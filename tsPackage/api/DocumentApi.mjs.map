{"version":3,"file":"DocumentApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/DocumentApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {DocumentShareOptions} from '../crypto/entities/DocumentShareOptions.mjs';\nimport {SecretIdUseOption} from '../crypto/entities/SecretIdUseOption.mjs';\nimport {DecryptedDocument, Document, EncryptedDocument} from '../model/Document.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {Message} from '../model/Message.mjs';\nimport {Patient} from '../model/Patient.mjs';\nimport {User} from '../model/User.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {AccessLevel} from '../model/embed/AccessLevel.mjs';\nimport {HexString} from '../model/specializations/HexString.mjs';\nimport {DocumentFlavouredApi} from './DocumentFlavouredApi.mjs';\n\n\nexport interface DocumentApi {\n\n\tencrypted: DocumentFlavouredApi<EncryptedDocument>;\n\n\ttryAndRecover: DocumentFlavouredApi<Document>;\n\n\tcreateDocument(entity: DecryptedDocument): Promise<DecryptedDocument>;\n\n\twithEncryptionMetadata(base: DecryptedDocument | undefined, message: Message | undefined,\n\t\t\toptions?: { user?: User | undefined, delegates?: { [ key: string ]: AccessLevel }, secretId?: SecretIdUseOption }): Promise<DecryptedDocument>;\n\n\tgetAndTryDecryptMainAttachment(document: Document,\n\t\t\toptions?: { decryptedAttachmentValidator?: (x1: Int8Array) => Promise<boolean> }): Promise<Int8Array | undefined>;\n\n\tgetAndTryDecryptMainAttachmentAsPlainText(document: Document,\n\t\t\toptions?: { decryptedAttachmentValidator?: (x1: Int8Array) => Promise<boolean> }): Promise<string | undefined>;\n\n\tgetAndTryDecryptMainAttachmentAsJson(document: Document,\n\t\t\toptions?: { decryptedAttachmentValidator?: (x1: Int8Array) => Promise<boolean> }): Promise<any | undefined>;\n\n\tgetAndDecryptMainAttachment(document: Document,\n\t\t\toptions?: { decryptedAttachmentValidator?: (x1: Int8Array) => Promise<boolean> }): Promise<Int8Array>;\n\n\tencryptAndSetMainAttachment(document: Document, utis: Array<string> | undefined,\n\t\t\tattachment: Int8Array): Promise<EncryptedDocument>;\n\n\tgetAndDecryptSecondaryAttachment(document: Document, key: string,\n\t\t\toptions?: { decryptedAttachmentValidator?: (x1: Int8Array) => Promise<boolean> }): Promise<Int8Array>;\n\n\tencryptAndSetSecondaryAttachment(document: Document, key: string, utis: Array<string> | undefined,\n\t\t\tattachment: Int8Array): Promise<EncryptedDocument>;\n\n\tgetEncryptionKeysOf(document: Document): Promise<Array<HexString>>;\n\n\thasWriteAccess(document: Document): Promise<boolean>;\n\n\tdecryptPatientIdOf(document: Document): Promise<Array<string>>;\n\n\tcreateDelegationDeAnonymizationMetadata(entity: Document, delegates: Array<string>): Promise<void>;\n\n\tdecrypt(document: EncryptedDocument): Promise<DecryptedDocument>;\n\n\ttryDecrypt(document: EncryptedDocument): Promise<Document>;\n\n\ttryDecryptAttachment(document: Document, encryptedAttachment: Int8Array,\n\t\t\toptions?: { decryptedAttachmentValidator?: (x1: Int8Array) => Promise<boolean> }): Promise<Int8Array | undefined>;\n\n\tmatchDocumentsBy(filter: FilterOptions<Document>): Promise<Array<string>>;\n\n\tmatchDocumentsBySorted(filter: SortableFilterOptions<Document>): Promise<Array<string>>;\n\n\tdeleteDocumentUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteDocumentsUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteDocumentById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteDocumentsByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeDocumentById(id: string, rev: string): Promise<void>;\n\n\tdeleteDocument(document: Document): Promise<DocIdentifier>;\n\n\tdeleteDocuments(documents: Array<Document>): Promise<Array<DocIdentifier>>;\n\n\tpurgeDocument(document: Document): Promise<void>;\n\n\tgetRawMainAttachment(documentId: string): Promise<Int8Array>;\n\n\tgetMainAttachmentAsPlainText(documentId: string): Promise<string>;\n\n\tgetMainAttachmentAsJson(documentId: string): Promise<any>;\n\n\tgetRawSecondaryAttachment(documentId: string, key: string): Promise<Int8Array>;\n\n\tsetRawMainAttachment(\n\t\t\tdocumentId: string,\n\t\t\trev: string,\n\t\t\tutis: Array<string> | undefined,\n\t\t\tattachment: Int8Array,\n\t\t\tencrypted: boolean\n\t): Promise<EncryptedDocument>;\n\n\tsetRawSecondaryAttachment(\n\t\t\tdocumentId: string,\n\t\t\tkey: string,\n\t\t\trev: string,\n\t\t\tutis: Array<string> | undefined,\n\t\t\tattachment: Int8Array,\n\t\t\tencrypted: boolean\n\t): Promise<EncryptedDocument>;\n\n\tdeleteMainAttachment(entityId: string, rev: string): Promise<EncryptedDocument>;\n\n\tdeleteSecondaryAttachment(documentId: string, key: string,\n\t\t\trev: string): Promise<EncryptedDocument>;\n\n\tshareWith(delegateId: string, document: DecryptedDocument,\n\t\t\toptions?: { options?: DocumentShareOptions | undefined }): Promise<DecryptedDocument>;\n\n\tshareWithMany(document: DecryptedDocument,\n\t\t\tdelegates: { [ key: string ]: DocumentShareOptions }): Promise<DecryptedDocument>;\n\n\tfindDocumentsByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<DecryptedDocument>>;\n\n\tfilterDocumentsBy(filter: FilterOptions<Document>): Promise<PaginatedListIterator<DecryptedDocument>>;\n\n\tfilterDocumentsBySorted(filter: SortableFilterOptions<Document>): Promise<PaginatedListIterator<DecryptedDocument>>;\n\n\tundeleteDocumentById(id: string, rev: string): Promise<DecryptedDocument>;\n\n\tundeleteDocument(document: Document): Promise<DecryptedDocument>;\n\n\tmodifyDocument(entity: DecryptedDocument): Promise<DecryptedDocument>;\n\n\tgetDocument(entityId: string): Promise<DecryptedDocument>;\n\n\tgetDocumentByExternalUuid(externalUuid: string): Promise<DecryptedDocument>;\n\n\tgetDocumentsByExternalUuid(externalUuid: string): Promise<Array<DecryptedDocument>>;\n\n\tgetDocuments(entityIds: Array<string>): Promise<Array<DecryptedDocument>>;\n\n\tmodifyDocuments(entities: Array<DecryptedDocument>): Promise<Array<DecryptedDocument>>;\n\n\tfindWithoutDelegation(limit: number | undefined): Promise<Array<DecryptedDocument>>;\n\n}\n"]}