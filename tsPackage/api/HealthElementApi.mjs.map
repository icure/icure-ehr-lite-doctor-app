{"version":3,"file":"HealthElementApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/HealthElementApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {HealthElementShareOptions} from '../crypto/entities/HealthElementShareOptions.mjs';\nimport {SecretIdUseOption} from '../crypto/entities/SecretIdUseOption.mjs';\nimport {DecryptedHealthElement, EncryptedHealthElement, HealthElement} from '../model/HealthElement.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {Patient} from '../model/Patient.mjs';\nimport {User} from '../model/User.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {AccessLevel} from '../model/embed/AccessLevel.mjs';\nimport {HexString} from '../model/specializations/HexString.mjs';\nimport {EntitySubscription} from '../subscription/EntitySubscription.mjs';\nimport {EntitySubscriptionConfiguration} from '../subscription/EntitySubscriptionConfiguration.mjs';\nimport {SubscriptionEventType} from '../subscription/SubscriptionEventType.mjs';\nimport {HealthElementFlavouredApi} from './HealthElementFlavouredApi.mjs';\n\n\nexport interface HealthElementApi {\n\n\tencrypted: HealthElementFlavouredApi<EncryptedHealthElement>;\n\n\ttryAndRecover: HealthElementFlavouredApi<HealthElement>;\n\n\tcreateHealthElement(entity: DecryptedHealthElement): Promise<DecryptedHealthElement>;\n\n\tcreateHealthElements(entities: Array<DecryptedHealthElement>): Promise<Array<DecryptedHealthElement>>;\n\n\twithEncryptionMetadata(base: DecryptedHealthElement | undefined, patient: Patient,\n\t\t\toptions?: { user?: User | undefined, delegates?: { [ key: string ]: AccessLevel }, secretId?: SecretIdUseOption }): Promise<DecryptedHealthElement>;\n\n\tgetEncryptionKeysOf(healthElement: HealthElement): Promise<Array<HexString>>;\n\n\thasWriteAccess(healthElement: HealthElement): Promise<boolean>;\n\n\tdecryptPatientIdOf(healthElement: HealthElement): Promise<Array<string>>;\n\n\tcreateDelegationDeAnonymizationMetadata(entity: HealthElement,\n\t\t\tdelegates: Array<string>): Promise<void>;\n\n\tdecrypt(healthElement: EncryptedHealthElement): Promise<DecryptedHealthElement>;\n\n\ttryDecrypt(healthElement: EncryptedHealthElement): Promise<HealthElement>;\n\n\tmatchHealthElementsBy(filter: FilterOptions<HealthElement>): Promise<Array<string>>;\n\n\tmatchHealthElementsBySorted(filter: SortableFilterOptions<HealthElement>): Promise<Array<string>>;\n\n\tdeleteHealthElementUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteHealthElementsUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteHealthElementById(entityId: string, rev: string | undefined): Promise<DocIdentifier>;\n\n\tdeleteHealthElementsByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeHealthElementById(id: string, rev: string): Promise<void>;\n\n\tdeleteHealthElement(healthElement: HealthElement): Promise<DocIdentifier>;\n\n\tdeleteHealthElements(healthElements: Array<HealthElement>): Promise<Array<DocIdentifier>>;\n\n\tpurgeHealthElement(healthElement: HealthElement): Promise<void>;\n\n\tshareWith(delegateId: string, healthElement: DecryptedHealthElement,\n\t\t\toptions?: { options?: HealthElementShareOptions | undefined }): Promise<DecryptedHealthElement>;\n\n\tshareWithMany(healthElement: DecryptedHealthElement,\n\t\t\tdelegates: { [ key: string ]: HealthElementShareOptions }): Promise<DecryptedHealthElement>;\n\n\tfindHealthElementsByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<DecryptedHealthElement>>;\n\n\tfilterHealthElementsBy(filter: FilterOptions<HealthElement>): Promise<PaginatedListIterator<DecryptedHealthElement>>;\n\n\tfilterHealthElementsBySorted(filter: SortableFilterOptions<HealthElement>): Promise<PaginatedListIterator<DecryptedHealthElement>>;\n\n\tundeleteHealthElementById(id: string, rev: string): Promise<DecryptedHealthElement>;\n\n\tundeleteHealthElement(healthElement: HealthElement): Promise<DecryptedHealthElement>;\n\n\tmodifyHealthElement(entity: DecryptedHealthElement): Promise<DecryptedHealthElement>;\n\n\tmodifyHealthElements(entities: Array<DecryptedHealthElement>): Promise<Array<DecryptedHealthElement>>;\n\n\tgetHealthElement(entityId: string): Promise<DecryptedHealthElement>;\n\n\tgetHealthElements(entityIds: Array<string>): Promise<Array<DecryptedHealthElement>>;\n\n\tsubscribeToEvents(events: Array<SubscriptionEventType>, filter: FilterOptions<HealthElement>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<EncryptedHealthElement>>;\n\n}\n"]}