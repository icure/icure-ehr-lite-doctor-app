{"version":3,"file":"MaintenanceTaskApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/MaintenanceTaskApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {MaintenanceTaskShareOptions} from '../crypto/entities/MaintenanceTaskShareOptions.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {DecryptedMaintenanceTask, EncryptedMaintenanceTask, MaintenanceTask} from '../model/MaintenanceTask.mjs';\nimport {User} from '../model/User.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {AccessLevel} from '../model/embed/AccessLevel.mjs';\nimport {HexString} from '../model/specializations/HexString.mjs';\nimport {EntitySubscription} from '../subscription/EntitySubscription.mjs';\nimport {EntitySubscriptionConfiguration} from '../subscription/EntitySubscriptionConfiguration.mjs';\nimport {SubscriptionEventType} from '../subscription/SubscriptionEventType.mjs';\nimport {MaintenanceTaskFlavouredApi} from './MaintenanceTaskFlavouredApi.mjs';\n\n\nexport interface MaintenanceTaskApi {\n\n\tencrypted: MaintenanceTaskFlavouredApi<EncryptedMaintenanceTask>;\n\n\ttryAndRecover: MaintenanceTaskFlavouredApi<MaintenanceTask>;\n\n\tcreateMaintenanceTask(entity: DecryptedMaintenanceTask): Promise<DecryptedMaintenanceTask>;\n\n\twithEncryptionMetadata(maintenanceTask: DecryptedMaintenanceTask | undefined,\n\t\t\toptions?: { user?: User | undefined, delegates?: { [ key: string ]: AccessLevel } }): Promise<DecryptedMaintenanceTask>;\n\n\tgetEncryptionKeysOf(maintenanceTask: MaintenanceTask): Promise<Array<HexString>>;\n\n\thasWriteAccess(maintenanceTask: MaintenanceTask): Promise<boolean>;\n\n\tdecryptPatientIdOf(maintenanceTask: MaintenanceTask): Promise<Array<string>>;\n\n\tcreateDelegationDeAnonymizationMetadata(entity: MaintenanceTask,\n\t\t\tdelegates: Array<string>): Promise<void>;\n\n\tdecrypt(maintenanceTask: EncryptedMaintenanceTask): Promise<DecryptedMaintenanceTask>;\n\n\ttryDecrypt(maintenanceTask: EncryptedMaintenanceTask): Promise<MaintenanceTask>;\n\n\tmatchMaintenanceTasksBy(filter: FilterOptions<MaintenanceTask>): Promise<Array<string>>;\n\n\tmatchMaintenanceTasksBySorted(filter: SortableFilterOptions<MaintenanceTask>): Promise<Array<string>>;\n\n\tdeleteMaintenanceTaskUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteMaintenanceTasksUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteMaintenanceTaskById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteMaintenanceTasksByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeMaintenanceTaskById(id: string, rev: string): Promise<void>;\n\n\tdeleteMaintenanceTask(maintenanceTask: MaintenanceTask): Promise<DocIdentifier>;\n\n\tdeleteMaintenanceTasks(maintenanceTasks: Array<MaintenanceTask>): Promise<Array<DocIdentifier>>;\n\n\tpurgeMaintenanceTask(maintenanceTask: MaintenanceTask): Promise<void>;\n\n\tshareWith(delegateId: string, maintenanceTask: DecryptedMaintenanceTask,\n\t\t\toptions?: { options?: MaintenanceTaskShareOptions | undefined }): Promise<DecryptedMaintenanceTask>;\n\n\tshareWithMany(maintenanceTask: DecryptedMaintenanceTask,\n\t\t\tdelegates: { [ key: string ]: MaintenanceTaskShareOptions }): Promise<DecryptedMaintenanceTask>;\n\n\tfilterMaintenanceTasksBy(filter: FilterOptions<MaintenanceTask>): Promise<PaginatedListIterator<DecryptedMaintenanceTask>>;\n\n\tfilterMaintenanceTasksBySorted(filter: SortableFilterOptions<MaintenanceTask>): Promise<PaginatedListIterator<DecryptedMaintenanceTask>>;\n\n\tundeleteMaintenanceTask(maintenanceTask: MaintenanceTask): Promise<MaintenanceTask>;\n\n\tundeleteMaintenanceTaskById(id: string, rev: string): Promise<DecryptedMaintenanceTask>;\n\n\tmodifyMaintenanceTask(entity: DecryptedMaintenanceTask): Promise<DecryptedMaintenanceTask>;\n\n\tgetMaintenanceTask(entityId: string): Promise<DecryptedMaintenanceTask>;\n\n\tgetMaintenanceTasks(entityIds: Array<string>): Promise<Array<DecryptedMaintenanceTask>>;\n\n\tsubscribeToEvents(events: Array<SubscriptionEventType>, filter: FilterOptions<MaintenanceTask>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<EncryptedMaintenanceTask>>;\n\n}\n"]}