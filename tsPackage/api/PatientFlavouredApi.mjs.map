{"version":3,"file":"PatientFlavouredApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/PatientFlavouredApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {PatientShareOptions} from '../crypto/entities/PatientShareOptions.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {IdWithRev} from '../model/IdWithRev.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {EncryptedPatient, Patient} from '../model/Patient.mjs';\nimport {SortDirection} from '../model/couchdb/SortDirection.mjs';\n\n\nexport interface PatientFlavouredApi<E extends Patient> {\n\n\tshareWith(delegateId: string, patient: E,\n\t\t\toptions?: { options?: PatientShareOptions | undefined }): Promise<E>;\n\n\tshareWithMany(patient: E, delegates: { [ key: string ]: PatientShareOptions }): Promise<E>;\n\n\tinitializeConfidentialSecretId(patient: E): Promise<E>;\n\n\tfilterPatientsBy(filter: FilterOptions<Patient>): Promise<PaginatedListIterator<E>>;\n\n\tfilterPatientsBySorted(filter: SortableFilterOptions<Patient>): Promise<PaginatedListIterator<E>>;\n\n\tundeletePatient(patient: Patient): Promise<Patient>;\n\n\tmodifyPatient(entity: E): Promise<E>;\n\n\tundeletePatientById(id: string, rev: string): Promise<E>;\n\n\tundeletePatients(ids: Array<IdWithMandatoryRev>): Promise<Array<E>>;\n\n\tgetPatient(entityId: string): Promise<E>;\n\n\tgetPatientResolvingMerges(patientId: string, maxMergeDepth: number | undefined): Promise<E>;\n\n\tfindPatientsByNameBirthSsinAuto(filterValue: string,\n\t\t\toptions?: { healthcarePartyId?: string | undefined, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, sortDirection?: SortDirection }): Promise<PaginatedList<E>>;\n\n\tlistPatientsOfHcParty(hcPartyId: string,\n\t\t\toptions?: { sortField?: string, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, sortDirection?: SortDirection }): Promise<PaginatedList<E>>;\n\n\tlistOfMergesAfter(date: number): Promise<Array<E>>;\n\n\tfindPatientsModifiedAfter(date: number,\n\t\t\toptions?: { startKey?: number | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<E>>;\n\n\tlistPatientsByHcParty(hcPartyId: string,\n\t\t\toptions?: { sortField?: string, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, sortDirection?: SortDirection }): Promise<PaginatedList<E>>;\n\n\tfindPatientsByHealthcareParty(options?: { hcPartyId?: string | undefined, sortField?: string, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, sortDirection?: SortDirection }): Promise<PaginatedList<E>>;\n\n\tfindPatientsIdsByHealthcareParty(hcPartyId: string,\n\t\t\toptions?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<string>>;\n\n\tgetPatientByExternalId(externalId: string): Promise<E>;\n\n\tfuzzySearch(firstName: string, lastName: string,\n\t\t\toptions?: { dateOfBirth?: number | undefined }): Promise<Array<E>>;\n\n\tfindDeletedPatients(startDate: number,\n\t\t\toptions?: { endDate?: number | undefined, desc?: boolean | undefined, startKey?: number | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<E>>;\n\n\tlistDeletedPatientsByName(options?: { firstName?: string | undefined, lastName?: string | undefined }): Promise<Array<E>>;\n\n\tgetPatients(patientIds: Array<string>): Promise<Array<E>>;\n\n\tgetPatientByHealthcarePartyAndIdentifier(hcPartyId: string, id: string,\n\t\t\toptions?: { system?: string | undefined }): Promise<E>;\n\n\tmodifyPatients(patientDtos: Array<EncryptedPatient>): Promise<Array<IdWithRev>>;\n\n\tfindDuplicatesBySsin(hcPartyId: string,\n\t\t\toptions?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<E>>;\n\n\tfindDuplicatesByName(hcPartyId: string,\n\t\t\toptions?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<E>>;\n\n\tmergePatients(from: Patient, mergedInto: E): Promise<E>;\n\n}\n"]}