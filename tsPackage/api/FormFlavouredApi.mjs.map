{"version":3,"file":"FormFlavouredApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/FormFlavouredApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {FormShareOptions} from '../crypto/entities/FormShareOptions.mjs';\nimport {Form} from '../model/Form.mjs';\nimport {Patient} from '../model/Patient.mjs';\n\n\nexport interface FormFlavouredApi<E extends Form> {\n\n\tshareWith(delegateId: string, form: E,\n\t\t\toptions?: { options?: FormShareOptions | undefined }): Promise<E>;\n\n\tshareWithMany(form: E, delegates: { [ key: string ]: FormShareOptions }): Promise<E>;\n\n\tfindFormsByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<E>>;\n\n\tfilterFormsBy(filter: FilterOptions<Form>): Promise<PaginatedListIterator<E>>;\n\n\tfilterFormsBySorted(filter: SortableFilterOptions<Form>): Promise<PaginatedListIterator<E>>;\n\n\tmodifyForm(entity: E): Promise<E>;\n\n\tundeleteFormById(id: string, rev: string): Promise<E>;\n\n\tundeleteForm(form: Form): Promise<E>;\n\n\tmodifyForms(entities: Array<E>): Promise<Array<E>>;\n\n\tgetForm(entityId: string): Promise<E>;\n\n\tgetForms(entityIds: Array<string>): Promise<Array<E>>;\n\n\tgetLatestFormByLogicalUuid(logicalUuid: string): Promise<E>;\n\n\tgetLatestFormByUniqueId(uniqueId: string): Promise<E>;\n\n\tgetFormsByLogicalUuid(logicalUuid: string): Promise<Array<E>>;\n\n\tgetFormsByUniqueId(uniqueId: string): Promise<Array<E>>;\n\n\tgetChildrenForms(hcPartyId: string, parentId: string): Promise<Array<E>>;\n\n}\n"]}