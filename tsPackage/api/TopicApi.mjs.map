{"version":3,"file":"TopicApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/TopicApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {SecretIdUseOption} from '../crypto/entities/SecretIdUseOption.mjs';\nimport {TopicShareOptions} from '../crypto/entities/TopicShareOptions.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {Patient} from '../model/Patient.mjs';\nimport {DecryptedTopic, EncryptedTopic, Topic} from '../model/Topic.mjs';\nimport {TopicRole} from '../model/TopicRole.mjs';\nimport {User} from '../model/User.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {AccessLevel} from '../model/embed/AccessLevel.mjs';\nimport {HexString} from '../model/specializations/HexString.mjs';\nimport {EntitySubscription} from '../subscription/EntitySubscription.mjs';\nimport {EntitySubscriptionConfiguration} from '../subscription/EntitySubscriptionConfiguration.mjs';\nimport {SubscriptionEventType} from '../subscription/SubscriptionEventType.mjs';\nimport {TopicFlavouredApi} from './TopicFlavouredApi.mjs';\n\n\nexport interface TopicApi {\n\n\tencrypted: TopicFlavouredApi<EncryptedTopic>;\n\n\ttryAndRecover: TopicFlavouredApi<Topic>;\n\n\tcreateTopic(entity: DecryptedTopic): Promise<DecryptedTopic>;\n\n\twithEncryptionMetadata(base: DecryptedTopic | undefined, patient: Patient | undefined,\n\t\t\toptions?: { user?: User | undefined, delegates?: { [ key: string ]: AccessLevel }, secretId?: SecretIdUseOption }): Promise<DecryptedTopic>;\n\n\tgetEncryptionKeysOf(topic: Topic): Promise<Array<HexString>>;\n\n\thasWriteAccess(topic: Topic): Promise<boolean>;\n\n\tdecryptPatientIdOf(topic: Topic): Promise<Array<string>>;\n\n\tcreateDelegationDeAnonymizationMetadata(entity: Topic, delegates: Array<string>): Promise<void>;\n\n\tdecrypt(topic: EncryptedTopic): Promise<DecryptedTopic>;\n\n\ttryDecrypt(topic: EncryptedTopic): Promise<Topic>;\n\n\tmatchTopicsBy(filter: FilterOptions<Topic>): Promise<Array<string>>;\n\n\tmatchTopicsBySorted(filter: SortableFilterOptions<Topic>): Promise<Array<string>>;\n\n\tdeleteTopicUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteTopicsUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteTopicById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteTopicsByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeTopicById(id: string, rev: string): Promise<void>;\n\n\tdeleteTopic(topic: Topic): Promise<DocIdentifier>;\n\n\tdeleteTopics(topics: Array<Topic>): Promise<Array<DocIdentifier>>;\n\n\tpurgeTopic(topic: Topic): Promise<void>;\n\n\tshareWith(delegateId: string, topic: DecryptedTopic,\n\t\t\toptions?: { options?: TopicShareOptions | undefined }): Promise<DecryptedTopic>;\n\n\tshareWithMany(topic: DecryptedTopic,\n\t\t\tdelegates: { [ key: string ]: TopicShareOptions }): Promise<DecryptedTopic>;\n\n\tfilterTopicsBy(filter: FilterOptions<Topic>): Promise<PaginatedListIterator<DecryptedTopic>>;\n\n\tfilterTopicsBySorted(filter: SortableFilterOptions<Topic>): Promise<PaginatedListIterator<DecryptedTopic>>;\n\n\tundeleteTopic(topic: Topic): Promise<Topic>;\n\n\tmodifyTopic(entity: DecryptedTopic): Promise<DecryptedTopic>;\n\n\tundeleteTopicById(id: string, rev: string): Promise<DecryptedTopic>;\n\n\tgetTopic(entityId: string): Promise<DecryptedTopic>;\n\n\tgetTopics(entityIds: Array<string>): Promise<Array<DecryptedTopic>>;\n\n\taddParticipant(entityId: string, dataOwnerId: string,\n\t\t\ttopicRole: TopicRole): Promise<DecryptedTopic>;\n\n\tremoveParticipant(entityId: string, dataOwnerId: string): Promise<DecryptedTopic>;\n\n\tsubscribeToEvents(events: Array<SubscriptionEventType>, filter: FilterOptions<Topic>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<EncryptedTopic>>;\n\n}\n"]}