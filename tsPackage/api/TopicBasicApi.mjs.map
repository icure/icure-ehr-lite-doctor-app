{"version":3,"file":"TopicBasicApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/TopicBasicApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {BaseFilterOptions, BaseSortableFilterOptions, PaginatedListIterator} from '../cardinal-sdk-ts.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {EncryptedTopic, Topic} from '../model/Topic.mjs';\nimport {TopicRole} from '../model/TopicRole.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {EntitySubscription} from '../subscription/EntitySubscription.mjs';\nimport {EntitySubscriptionConfiguration} from '../subscription/EntitySubscriptionConfiguration.mjs';\nimport {SubscriptionEventType} from '../subscription/SubscriptionEventType.mjs';\n\n\nexport interface TopicBasicApi {\n\n\tmatchTopicsBy(filter: BaseFilterOptions<Topic>): Promise<Array<string>>;\n\n\tmatchTopicsBySorted(filter: BaseSortableFilterOptions<Topic>): Promise<Array<string>>;\n\n\tfilterTopicsBy(filter: BaseFilterOptions<Topic>): Promise<PaginatedListIterator<EncryptedTopic>>;\n\n\tfilterTopicsBySorted(filter: BaseSortableFilterOptions<Topic>): Promise<PaginatedListIterator<EncryptedTopic>>;\n\n\tdeleteTopicUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteTopicsUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteTopicById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteTopicsByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeTopicById(id: string, rev: string): Promise<void>;\n\n\tdeleteTopic(topic: Topic): Promise<DocIdentifier>;\n\n\tdeleteTopics(topics: Array<Topic>): Promise<Array<DocIdentifier>>;\n\n\tpurgeTopic(topic: Topic): Promise<void>;\n\n\tundeleteTopic(topic: Topic): Promise<Topic>;\n\n\tmodifyTopic(entity: EncryptedTopic): Promise<EncryptedTopic>;\n\n\tundeleteTopicById(id: string, rev: string): Promise<EncryptedTopic>;\n\n\tgetTopic(entityId: string): Promise<EncryptedTopic>;\n\n\tgetTopics(entityIds: Array<string>): Promise<Array<EncryptedTopic>>;\n\n\taddParticipant(entityId: string, dataOwnerId: string,\n\t\t\ttopicRole: TopicRole): Promise<EncryptedTopic>;\n\n\tremoveParticipant(entityId: string, dataOwnerId: string): Promise<EncryptedTopic>;\n\n\tsubscribeToEvents(events: Array<SubscriptionEventType>, filter: BaseFilterOptions<Topic>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<EncryptedTopic>>;\n\n}\n"]}