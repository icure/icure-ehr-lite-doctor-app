{"version":3,"file":"DocumentFlavouredApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/DocumentFlavouredApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {DocumentShareOptions} from '../crypto/entities/DocumentShareOptions.mjs';\nimport {Document} from '../model/Document.mjs';\nimport {Patient} from '../model/Patient.mjs';\n\n\nexport interface DocumentFlavouredApi<E extends Document> {\n\n\tshareWith(delegateId: string, document: E,\n\t\t\toptions?: { options?: DocumentShareOptions | undefined }): Promise<E>;\n\n\tshareWithMany(document: E, delegates: { [ key: string ]: DocumentShareOptions }): Promise<E>;\n\n\tfindDocumentsByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<E>>;\n\n\tfilterDocumentsBy(filter: FilterOptions<Document>): Promise<PaginatedListIterator<E>>;\n\n\tfilterDocumentsBySorted(filter: SortableFilterOptions<Document>): Promise<PaginatedListIterator<E>>;\n\n\tundeleteDocumentById(id: string, rev: string): Promise<E>;\n\n\tundeleteDocument(document: Document): Promise<E>;\n\n\tmodifyDocument(entity: E): Promise<E>;\n\n\tgetDocument(entityId: string): Promise<E>;\n\n\tgetDocumentByExternalUuid(externalUuid: string): Promise<E>;\n\n\tgetDocumentsByExternalUuid(externalUuid: string): Promise<Array<E>>;\n\n\tgetDocuments(entityIds: Array<string>): Promise<Array<E>>;\n\n\tmodifyDocuments(entities: Array<E>): Promise<Array<E>>;\n\n\tfindWithoutDelegation(limit: number | undefined): Promise<Array<E>>;\n\n}\n"]}