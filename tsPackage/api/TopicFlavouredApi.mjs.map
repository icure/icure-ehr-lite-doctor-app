{"version":3,"file":"TopicFlavouredApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/TopicFlavouredApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {TopicShareOptions} from '../crypto/entities/TopicShareOptions.mjs';\nimport {Topic} from '../model/Topic.mjs';\nimport {TopicRole} from '../model/TopicRole.mjs';\n\n\nexport interface TopicFlavouredApi<E extends Topic> {\n\n\tshareWith(delegateId: string, topic: E,\n\t\t\toptions?: { options?: TopicShareOptions | undefined }): Promise<E>;\n\n\tshareWithMany(topic: E, delegates: { [ key: string ]: TopicShareOptions }): Promise<E>;\n\n\tfilterTopicsBy(filter: FilterOptions<Topic>): Promise<PaginatedListIterator<E>>;\n\n\tfilterTopicsBySorted(filter: SortableFilterOptions<Topic>): Promise<PaginatedListIterator<E>>;\n\n\tundeleteTopic(topic: Topic): Promise<Topic>;\n\n\tmodifyTopic(entity: E): Promise<E>;\n\n\tundeleteTopicById(id: string, rev: string): Promise<E>;\n\n\tgetTopic(entityId: string): Promise<E>;\n\n\tgetTopics(entityIds: Array<string>): Promise<Array<E>>;\n\n\taddParticipant(entityId: string, dataOwnerId: string, topicRole: TopicRole): Promise<E>;\n\n\tremoveParticipant(entityId: string, dataOwnerId: string): Promise<E>;\n\n}\n"]}