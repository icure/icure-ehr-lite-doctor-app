{"version":3,"file":"TimeTableApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/TimeTableApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {SecretIdUseOption} from '../crypto/entities/SecretIdUseOption.mjs';\nimport {TimeTableShareOptions} from '../crypto/entities/TimeTableShareOptions.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {Patient} from '../model/Patient.mjs';\nimport {DecryptedTimeTable, EncryptedTimeTable, TimeTable} from '../model/TimeTable.mjs';\nimport {User} from '../model/User.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {AccessLevel} from '../model/embed/AccessLevel.mjs';\nimport {HexString} from '../model/specializations/HexString.mjs';\nimport {TimeTableFlavouredApi} from './TimeTableFlavouredApi.mjs';\n\n\nexport interface TimeTableApi {\n\n\tencrypted: TimeTableFlavouredApi<EncryptedTimeTable>;\n\n\ttryAndRecover: TimeTableFlavouredApi<TimeTable>;\n\n\tcreateTimeTable(entity: DecryptedTimeTable): Promise<DecryptedTimeTable>;\n\n\twithEncryptionMetadata(base: DecryptedTimeTable | undefined, patient: Patient | undefined,\n\t\t\toptions?: { user?: User | undefined, delegates?: { [ key: string ]: AccessLevel }, secretId?: SecretIdUseOption }): Promise<DecryptedTimeTable>;\n\n\tgetEncryptionKeysOf(timeTable: TimeTable): Promise<Array<HexString>>;\n\n\thasWriteAccess(timeTable: TimeTable): Promise<boolean>;\n\n\tdecryptPatientIdOf(timeTable: TimeTable): Promise<Array<string>>;\n\n\tcreateDelegationDeAnonymizationMetadata(entity: TimeTable,\n\t\t\tdelegates: Array<string>): Promise<void>;\n\n\tdecrypt(timeTable: EncryptedTimeTable): Promise<DecryptedTimeTable>;\n\n\ttryDecrypt(timeTable: EncryptedTimeTable): Promise<TimeTable>;\n\n\tmatchTimeTablesBy(filter: FilterOptions<TimeTable>): Promise<Array<string>>;\n\n\tmatchTimeTablesBySorted(filter: SortableFilterOptions<TimeTable>): Promise<Array<string>>;\n\n\tdeleteTimeTableUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteTimeTablesUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteTimeTableById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteTimeTablesByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeTimeTableById(id: string, rev: string): Promise<void>;\n\n\tdeleteTimeTable(timeTable: TimeTable): Promise<DocIdentifier>;\n\n\tdeleteTimeTables(timeTables: Array<TimeTable>): Promise<Array<DocIdentifier>>;\n\n\tpurgeTimeTable(timeTable: TimeTable): Promise<void>;\n\n\tshareWith(delegateId: string, timeTable: DecryptedTimeTable,\n\t\t\toptions?: { options?: TimeTableShareOptions | undefined }): Promise<DecryptedTimeTable>;\n\n\tshareWithMany(timeTable: DecryptedTimeTable,\n\t\t\tdelegates: { [ key: string ]: TimeTableShareOptions }): Promise<DecryptedTimeTable>;\n\n\tfilterTimeTablesBy(filter: FilterOptions<TimeTable>): Promise<PaginatedListIterator<DecryptedTimeTable>>;\n\n\tfilterTimeTablesBySorted(filter: SortableFilterOptions<TimeTable>): Promise<PaginatedListIterator<DecryptedTimeTable>>;\n\n\tundeleteTimeTable(timeTable: TimeTable): Promise<TimeTable>;\n\n\tmodifyTimeTable(entity: DecryptedTimeTable): Promise<DecryptedTimeTable>;\n\n\tundeleteTimeTableById(id: string, rev: string): Promise<DecryptedTimeTable>;\n\n\tgetTimeTable(entityId: string): Promise<DecryptedTimeTable>;\n\n\tgetTimeTables(timeTableIds: Array<string>): Promise<Array<DecryptedTimeTable>>;\n\n\tgetTimeTablesByPeriodAndAgendaId(startDate: number, endDate: number,\n\t\t\tagendaId: string): Promise<Array<DecryptedTimeTable>>;\n\n\tgetTimeTablesByAgendaId(agendaId: string): Promise<Array<DecryptedTimeTable>>;\n\n}\n"]}