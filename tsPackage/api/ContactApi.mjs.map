{"version":3,"file":"ContactApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/ContactApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {ContactShareOptions} from '../crypto/entities/ContactShareOptions.mjs';\nimport {SecretIdUseOption} from '../crypto/entities/SecretIdUseOption.mjs';\nimport {Contact, DecryptedContact, EncryptedContact} from '../model/Contact.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {Patient} from '../model/Patient.mjs';\nimport {User} from '../model/User.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {LabelledOccurence} from '../model/data/LabelledOccurence.mjs';\nimport {AccessLevel} from '../model/embed/AccessLevel.mjs';\nimport {DecryptedService, EncryptedService, Service} from '../model/embed/Service.mjs';\nimport {HexString} from '../model/specializations/HexString.mjs';\nimport {EntitySubscription} from '../subscription/EntitySubscription.mjs';\nimport {EntitySubscriptionConfiguration} from '../subscription/EntitySubscriptionConfiguration.mjs';\nimport {SubscriptionEventType} from '../subscription/SubscriptionEventType.mjs';\nimport {ContactFlavouredApi} from './ContactFlavouredApi.mjs';\n\n\nexport interface ContactApi {\n\n\tencrypted: ContactFlavouredApi<EncryptedContact, EncryptedService>;\n\n\ttryAndRecover: ContactFlavouredApi<Contact, Service>;\n\n\tmatchContactsBy(filter: FilterOptions<Contact>): Promise<Array<string>>;\n\n\tmatchServicesBy(filter: FilterOptions<Service>): Promise<Array<string>>;\n\n\tmatchContactsBySorted(filter: SortableFilterOptions<Contact>): Promise<Array<string>>;\n\n\tmatchServicesBySorted(filter: SortableFilterOptions<Service>): Promise<Array<string>>;\n\n\tcreateContact(entity: DecryptedContact): Promise<DecryptedContact>;\n\n\tcreateContacts(entities: Array<DecryptedContact>): Promise<Array<DecryptedContact>>;\n\n\twithEncryptionMetadata(base: DecryptedContact | undefined, patient: Patient,\n\t\t\toptions?: { user?: User | undefined, delegates?: { [ key: string ]: AccessLevel }, secretId?: SecretIdUseOption }): Promise<DecryptedContact>;\n\n\tgetEncryptionKeysOf(contact: Contact): Promise<Array<HexString>>;\n\n\thasWriteAccess(contact: Contact): Promise<boolean>;\n\n\tdecryptPatientIdOf(contact: Contact): Promise<Array<string>>;\n\n\tcreateDelegationDeAnonymizationMetadata(entity: Contact, delegates: Array<string>): Promise<void>;\n\n\tdecrypt(contact: EncryptedContact): Promise<DecryptedContact>;\n\n\ttryDecrypt(contact: EncryptedContact): Promise<Contact>;\n\n\tdecryptService(service: EncryptedService): Promise<DecryptedService>;\n\n\ttryDecryptService(service: EncryptedService): Promise<Service>;\n\n\tsubscribeToServiceCreateOrUpdateEvents(filter: FilterOptions<Service>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<EncryptedService>>;\n\n\tdeleteContactUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteContactsUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteContactById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteContactsByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeContactById(id: string, rev: string): Promise<void>;\n\n\tdeleteContact(contact: Contact): Promise<DocIdentifier>;\n\n\tdeleteContacts(contacts: Array<Contact>): Promise<Array<DocIdentifier>>;\n\n\tpurgeContact(contact: Contact): Promise<void>;\n\n\tgetServiceCodesOccurrences(codeType: string,\n\t\t\tminOccurrences: number): Promise<Array<LabelledOccurence>>;\n\n\tshareWith(delegateId: string, contact: DecryptedContact,\n\t\t\toptions?: { options?: ContactShareOptions | undefined }): Promise<DecryptedContact>;\n\n\tshareWithMany(contact: DecryptedContact,\n\t\t\tdelegates: { [ key: string ]: ContactShareOptions }): Promise<DecryptedContact>;\n\n\tfindContactsByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<DecryptedContact>>;\n\n\tfilterContactsBy(filter: FilterOptions<Contact>): Promise<PaginatedListIterator<DecryptedContact>>;\n\n\tfilterServicesBy(filter: FilterOptions<Service>): Promise<PaginatedListIterator<DecryptedService>>;\n\n\tfilterContactsBySorted(filter: SortableFilterOptions<Contact>): Promise<PaginatedListIterator<DecryptedContact>>;\n\n\tfilterServicesBySorted(filter: SortableFilterOptions<Service>): Promise<PaginatedListIterator<DecryptedService>>;\n\n\tundeleteContactById(id: string, rev: string): Promise<DecryptedContact>;\n\n\tundeleteContact(contact: Contact): Promise<DecryptedContact>;\n\n\tmodifyContact(entity: DecryptedContact): Promise<DecryptedContact>;\n\n\tmodifyContacts(entities: Array<DecryptedContact>): Promise<Array<DecryptedContact>>;\n\n\tgetContact(entityId: string): Promise<DecryptedContact>;\n\n\tgetContacts(entityIds: Array<string>): Promise<Array<DecryptedContact>>;\n\n\tlistContactByHCPartyServiceId(hcPartyId: string,\n\t\t\tserviceId: string): Promise<Array<DecryptedContact>>;\n\n\tlistContactsByExternalId(externalId: string): Promise<Array<DecryptedContact>>;\n\n\tlistContactsByHCPartyAndFormId(hcPartyId: string,\n\t\t\tformId: string): Promise<Array<DecryptedContact>>;\n\n\tlistContactsByHCPartyAndFormIds(hcPartyId: string,\n\t\t\tformIds: Array<string>): Promise<Array<DecryptedContact>>;\n\n\tgetService(serviceId: string): Promise<DecryptedService>;\n\n\tgetServices(entityIds: Array<string>): Promise<Array<DecryptedService>>;\n\n\tgetServicesLinkedTo(linkType: string, ids: Array<string>): Promise<Array<DecryptedService>>;\n\n\tlistServicesByAssociationId(associationId: string): Promise<Array<DecryptedService>>;\n\n\tlistServicesByHealthElementId(hcPartyId: string,\n\t\t\thealthElementId: string): Promise<Array<DecryptedService>>;\n\n\tfindContactsByOpeningDate(startDate: number, endDate: number, hcPartyId: string,\n\t\t\toptions?: { startKey?: any | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<DecryptedContact>>;\n\n\tsubscribeToEvents(events: Array<SubscriptionEventType>, filter: FilterOptions<Contact>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<EncryptedContact>>;\n\n}\n"]}