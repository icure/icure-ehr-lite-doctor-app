{"version":3,"file":"AccessLogFlavouredApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/AccessLogFlavouredApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {AccessLogShareOptions} from '../crypto/entities/AccessLogShareOptions.mjs';\nimport {AccessLog} from '../model/AccessLog.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {Patient} from '../model/Patient.mjs';\n\n\nexport interface AccessLogFlavouredApi<E extends AccessLog> {\n\n\tshareWith(delegateId: string, accessLog: E,\n\t\t\toptions?: { options?: AccessLogShareOptions | undefined }): Promise<E>;\n\n\tshareWithMany(accessLog: E, delegates: { [ key: string ]: AccessLogShareOptions }): Promise<E>;\n\n\tfindAccessLogsByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<E>>;\n\n\tfilterAccessLogsBy(filter: FilterOptions<AccessLog>): Promise<PaginatedListIterator<E>>;\n\n\tfilterAccessLogsBySorted(filter: SortableFilterOptions<AccessLog>): Promise<PaginatedListIterator<E>>;\n\n\tundeleteAccessLogById(id: string, rev: string): Promise<E>;\n\n\tundeleteAccessLog(accessLog: AccessLog): Promise<E>;\n\n\tmodifyAccessLog(entity: E): Promise<E>;\n\n\tgetAccessLog(entityId: string): Promise<E>;\n\n\tgetAccessLogs(entityIds: Array<string>): Promise<Array<E>>;\n\n\tfindAccessLogsBy(\n\t\t\tfromEpoch: number | undefined,\n\t\t\ttoEpoch: number | undefined,\n\t\t\tstartKey: number | undefined,\n\t\t\tstartDocumentId: string | undefined,\n\t\t\tlimit: number | undefined\n\t): Promise<PaginatedList<E>>;\n\n\tfindAccessLogsByUserAfterDate(userId: string,\n\t\t\toptions?: { accessType?: string | undefined, startDate?: number | undefined, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedList<E>>;\n\n\tfindAccessLogsInGroup(groupId: string,\n\t\t\toptions?: { fromEpoch?: number | undefined, toEpoch?: number | undefined, startKey?: number | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<E>>;\n\n}\n"]}