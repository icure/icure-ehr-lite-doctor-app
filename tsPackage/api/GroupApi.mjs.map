{"version":3,"file":"GroupApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/GroupApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {DatabaseInitialisation} from '../model/DatabaseInitialisation.mjs';\nimport {Group} from '../model/Group.mjs';\nimport {GroupDeletionReport} from '../model/GroupDeletionReport.mjs';\nimport {IdWithRev} from '../model/IdWithRev.mjs';\nimport {ListOfProperties} from '../model/ListOfProperties.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {RegistrationInformation} from '../model/RegistrationInformation.mjs';\nimport {RegistrationSuccess} from '../model/RegistrationSuccess.mjs';\nimport {ReplicationInfo} from '../model/ReplicationInfo.mjs';\nimport {DesignDocument} from '../model/couchdb/DesignDocument.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {GroupDatabasesInfo} from '../model/couchdb/GroupDatabasesInfo.mjs';\nimport {GroupType} from '../model/embed/GroupType.mjs';\nimport {RoleConfiguration} from '../model/embed/RoleConfiguration.mjs';\nimport {UserType} from '../model/embed/UserType.mjs';\nimport {Operation} from '../model/security/Operation.mjs';\nimport {PermissionType} from '../model/security/PermissionType.mjs';\n\n\nexport interface GroupApi {\n\n\tlistGroups(): Promise<Array<Group>>;\n\n\tgetGroup(id: string): Promise<Group>;\n\n\tcreateGroup(\n\t\t\tid: string,\n\t\t\tname: string,\n\t\t\tpassword: string,\n\t\t\tinitialisationData: DatabaseInitialisation,\n\t\t\toptions?: { type?: GroupType | undefined, server?: string | undefined, q?: number | undefined, n?: number | undefined, superGroup?: string | undefined, applicationId?: string | undefined }\n\t): Promise<Group>;\n\n\tregisterNewGroupAdministrator(registrationInformation: RegistrationInformation,\n\t\t\toptions?: { type?: GroupType | undefined, role?: PermissionType | undefined }): Promise<RegistrationSuccess>;\n\n\tlistApps(): Promise<Array<Group>>;\n\n\tfindGroups(id: string,\n\t\t\toptions?: { startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<Group>>;\n\n\tfindGroupsWithContent(id: string, searchString: string,\n\t\t\toptions?: { startKey?: any | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<Group>>;\n\n\tgetNameOfGroupParent(id: string): Promise<string>;\n\n\tmodifyGroupName(id: string, name: string): Promise<Group>;\n\n\tgetOperationToken(operation: Operation, duration: number | undefined,\n\t\t\toptions?: { description?: string | undefined }): Promise<string>;\n\n\tdeleteOperationToken(tokenId: string): Promise<void>;\n\n\tsetDefaultRoles(groupId: string, userType: string, roleIds: Array<string>): Promise<Group>;\n\n\tgetDefaultRoles(groupId: string): Promise<{ [ key in UserType ]?: Array<RoleConfiguration> }>;\n\n\tdeleteGroup(id: string): Promise<Group>;\n\n\tchangeSuperGroup(childGroupId: string, operationToken: string): Promise<Group>;\n\n\thardDeleteGroup(id: string): Promise<Array<GroupDeletionReport>>;\n\n\tmodifyGroupProperties(id: string, properties: ListOfProperties): Promise<Group>;\n\n\tsetGroupPassword(id: string, password: string): Promise<Group>;\n\n\tinitDesignDocs(id: string, warmup: boolean | undefined, dryRun: boolean | undefined,\n\t\t\toptions?: { clazz?: string | undefined }): Promise<Array<DesignDocument>>;\n\n\tsolveConflicts(id: string, limit: number | undefined,\n\t\t\twarmup: boolean | undefined): Promise<Array<IdWithRev>>;\n\n\tresetStorage(id: string, databases: Array<string>,\n\t\t\toptions?: { q?: number | undefined, n?: number | undefined }): Promise<void>;\n\n\tgetGroupsStorageInfos(groups: Array<string>): Promise<Array<GroupDatabasesInfo>>;\n\n\tgetReplicationInfo(id: string): Promise<ReplicationInfo>;\n\n\tgetHierarchy(id: string): Promise<Array<string>>;\n\n\tlistAllGroupsIds(): Promise<Array<DocIdentifier>>;\n\n}\n"]}