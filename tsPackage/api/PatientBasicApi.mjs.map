{"version":3,"file":"PatientBasicApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/PatientBasicApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {BaseFilterOptions, BaseSortableFilterOptions, PaginatedListIterator} from '../cardinal-sdk-ts.mjs';\nimport {EntityAccessInformation} from '../crypto/entities/EntityAccessInformation.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {IdWithRev} from '../model/IdWithRev.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {EncryptedPatient, Patient} from '../model/Patient.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {SortDirection} from '../model/couchdb/SortDirection.mjs';\nimport {EntitySubscription} from '../subscription/EntitySubscription.mjs';\nimport {EntitySubscriptionConfiguration} from '../subscription/EntitySubscriptionConfiguration.mjs';\nimport {SubscriptionEventType} from '../subscription/SubscriptionEventType.mjs';\n\n\nexport interface PatientBasicApi {\n\n\tmatchPatientsBy(filter: BaseFilterOptions<Patient>): Promise<Array<string>>;\n\n\tmatchPatientsBySorted(filter: BaseSortableFilterOptions<Patient>): Promise<Array<string>>;\n\n\tfilterPatientsBy(filter: BaseFilterOptions<Patient>): Promise<PaginatedListIterator<EncryptedPatient>>;\n\n\tfilterPatientsBySorted(filter: BaseSortableFilterOptions<Patient>): Promise<PaginatedListIterator<EncryptedPatient>>;\n\n\tdeletePatientUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeletePatientsUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeletePatientById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeletePatientsByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgePatientById(id: string, rev: string): Promise<void>;\n\n\tdeletePatient(patient: Patient): Promise<DocIdentifier>;\n\n\tdeletePatients(patients: Array<Patient>): Promise<Array<DocIdentifier>>;\n\n\tpurgePatient(patient: Patient): Promise<void>;\n\n\tgetDataOwnersWithAccessTo(patient: Patient): Promise<EntityAccessInformation>;\n\n\tcountOfPatients(hcPartyId: string): Promise<number>;\n\n\tundeletePatient(patient: Patient): Promise<Patient>;\n\n\tmodifyPatient(entity: EncryptedPatient): Promise<EncryptedPatient>;\n\n\tundeletePatientById(id: string, rev: string): Promise<EncryptedPatient>;\n\n\tundeletePatients(ids: Array<IdWithMandatoryRev>): Promise<Array<EncryptedPatient>>;\n\n\tgetPatient(entityId: string): Promise<EncryptedPatient>;\n\n\tgetPatientResolvingMerges(patientId: string,\n\t\t\tmaxMergeDepth: number | undefined): Promise<EncryptedPatient>;\n\n\tfindPatientsByNameBirthSsinAuto(filterValue: string,\n\t\t\toptions?: { healthcarePartyId?: string | undefined, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, sortDirection?: SortDirection }): Promise<PaginatedList<EncryptedPatient>>;\n\n\tlistPatientsOfHcParty(hcPartyId: string,\n\t\t\toptions?: { sortField?: string, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, sortDirection?: SortDirection }): Promise<PaginatedList<EncryptedPatient>>;\n\n\tlistOfMergesAfter(date: number): Promise<Array<EncryptedPatient>>;\n\n\tfindPatientsModifiedAfter(date: number,\n\t\t\toptions?: { startKey?: number | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<EncryptedPatient>>;\n\n\tlistPatientsByHcParty(hcPartyId: string,\n\t\t\toptions?: { sortField?: string, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, sortDirection?: SortDirection }): Promise<PaginatedList<EncryptedPatient>>;\n\n\tfindPatientsByHealthcareParty(options?: { hcPartyId?: string | undefined, sortField?: string, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, sortDirection?: SortDirection }): Promise<PaginatedList<EncryptedPatient>>;\n\n\tfindPatientsIdsByHealthcareParty(hcPartyId: string,\n\t\t\toptions?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<string>>;\n\n\tgetPatientByExternalId(externalId: string): Promise<EncryptedPatient>;\n\n\tfuzzySearch(firstName: string, lastName: string,\n\t\t\toptions?: { dateOfBirth?: number | undefined }): Promise<Array<EncryptedPatient>>;\n\n\tfindDeletedPatients(startDate: number,\n\t\t\toptions?: { endDate?: number | undefined, desc?: boolean | undefined, startKey?: number | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<EncryptedPatient>>;\n\n\tlistDeletedPatientsByName(options?: { firstName?: string | undefined, lastName?: string | undefined }): Promise<Array<EncryptedPatient>>;\n\n\tgetPatients(patientIds: Array<string>): Promise<Array<EncryptedPatient>>;\n\n\tgetPatientByHealthcarePartyAndIdentifier(hcPartyId: string, id: string,\n\t\t\toptions?: { system?: string | undefined }): Promise<EncryptedPatient>;\n\n\tmodifyPatients(patientDtos: Array<EncryptedPatient>): Promise<Array<IdWithRev>>;\n\n\tfindDuplicatesBySsin(hcPartyId: string,\n\t\t\toptions?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<EncryptedPatient>>;\n\n\tfindDuplicatesByName(hcPartyId: string,\n\t\t\toptions?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<EncryptedPatient>>;\n\n\tmergePatients(from: Patient, mergedInto: EncryptedPatient): Promise<EncryptedPatient>;\n\n\tsubscribeToEvents(events: Array<SubscriptionEventType>, filter: BaseFilterOptions<Patient>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<EncryptedPatient>>;\n\n}\n"]}