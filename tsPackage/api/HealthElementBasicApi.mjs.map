{"version":3,"file":"HealthElementBasicApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/HealthElementBasicApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {BaseFilterOptions, BaseSortableFilterOptions, PaginatedListIterator} from '../cardinal-sdk-ts.mjs';\nimport {EncryptedHealthElement, HealthElement} from '../model/HealthElement.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {EntitySubscription} from '../subscription/EntitySubscription.mjs';\nimport {EntitySubscriptionConfiguration} from '../subscription/EntitySubscriptionConfiguration.mjs';\nimport {SubscriptionEventType} from '../subscription/SubscriptionEventType.mjs';\n\n\nexport interface HealthElementBasicApi {\n\n\tmatchHealthElementsBy(filter: BaseFilterOptions<HealthElement>): Promise<Array<string>>;\n\n\tmatchHealthElementsBySorted(filter: BaseSortableFilterOptions<HealthElement>): Promise<Array<string>>;\n\n\tfilterHealthElementsBy(filter: BaseFilterOptions<HealthElement>): Promise<PaginatedListIterator<EncryptedHealthElement>>;\n\n\tfilterHealthElementsBySorted(filter: BaseSortableFilterOptions<HealthElement>): Promise<PaginatedListIterator<EncryptedHealthElement>>;\n\n\tdeleteHealthElementUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteHealthElementsUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteHealthElementById(entityId: string, rev: string | undefined): Promise<DocIdentifier>;\n\n\tdeleteHealthElementsByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeHealthElementById(id: string, rev: string): Promise<void>;\n\n\tdeleteHealthElement(healthElement: HealthElement): Promise<DocIdentifier>;\n\n\tdeleteHealthElements(healthElements: Array<HealthElement>): Promise<Array<DocIdentifier>>;\n\n\tpurgeHealthElement(healthElement: HealthElement): Promise<void>;\n\n\tundeleteHealthElementById(id: string, rev: string): Promise<EncryptedHealthElement>;\n\n\tundeleteHealthElement(healthElement: HealthElement): Promise<EncryptedHealthElement>;\n\n\tmodifyHealthElement(entity: EncryptedHealthElement): Promise<EncryptedHealthElement>;\n\n\tmodifyHealthElements(entities: Array<EncryptedHealthElement>): Promise<Array<EncryptedHealthElement>>;\n\n\tgetHealthElement(entityId: string): Promise<EncryptedHealthElement>;\n\n\tgetHealthElements(entityIds: Array<string>): Promise<Array<EncryptedHealthElement>>;\n\n\tsubscribeToEvents(events: Array<SubscriptionEventType>, filter: BaseFilterOptions<HealthElement>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<EncryptedHealthElement>>;\n\n}\n"]}