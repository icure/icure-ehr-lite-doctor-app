{"version":3,"file":"FormApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/FormApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {FormShareOptions} from '../crypto/entities/FormShareOptions.mjs';\nimport {SecretIdUseOption} from '../crypto/entities/SecretIdUseOption.mjs';\nimport {DecryptedForm, EncryptedForm, Form} from '../model/Form.mjs';\nimport {FormTemplate} from '../model/FormTemplate.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {Patient} from '../model/Patient.mjs';\nimport {User} from '../model/User.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {AccessLevel} from '../model/embed/AccessLevel.mjs';\nimport {HexString} from '../model/specializations/HexString.mjs';\nimport {FormFlavouredApi} from './FormFlavouredApi.mjs';\n\n\nexport interface FormApi {\n\n\tencrypted: FormFlavouredApi<EncryptedForm>;\n\n\ttryAndRecover: FormFlavouredApi<Form>;\n\n\tcreateForm(entity: DecryptedForm): Promise<DecryptedForm>;\n\n\tcreateForms(entities: Array<DecryptedForm>): Promise<Array<DecryptedForm>>;\n\n\twithEncryptionMetadata(base: DecryptedForm | undefined, patient: Patient,\n\t\t\toptions?: { user?: User | undefined, delegates?: { [ key: string ]: AccessLevel }, secretId?: SecretIdUseOption }): Promise<DecryptedForm>;\n\n\tgetEncryptionKeysOf(form: Form): Promise<Array<HexString>>;\n\n\thasWriteAccess(form: Form): Promise<boolean>;\n\n\tdecryptPatientIdOf(form: Form): Promise<Array<string>>;\n\n\tcreateDelegationDeAnonymizationMetadata(entity: Form, delegates: Array<string>): Promise<void>;\n\n\tdecrypt(form: EncryptedForm): Promise<DecryptedForm>;\n\n\ttryDecrypt(form: EncryptedForm): Promise<Form>;\n\n\tmatchFormsBy(filter: FilterOptions<Form>): Promise<Array<string>>;\n\n\tmatchFormsBySorted(filter: SortableFilterOptions<Form>): Promise<Array<string>>;\n\n\tdeleteFormUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteFormsUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteFormById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteFormsByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeFormById(id: string, rev: string): Promise<void>;\n\n\tdeleteForm(form: Form): Promise<DocIdentifier>;\n\n\tdeleteForms(forms: Array<Form>): Promise<Array<DocIdentifier>>;\n\n\tpurgeForm(form: Form): Promise<void>;\n\n\tgetFormTemplate(formTemplateId: string,\n\t\t\toptions?: { raw?: boolean | undefined }): Promise<FormTemplate>;\n\n\tgetFormTemplatesByGuid(formTemplateGuid: string, specialityCode: string,\n\t\t\traw: boolean | undefined): Promise<Array<FormTemplate>>;\n\n\tlistFormTemplatesBySpeciality(specialityCode: string,\n\t\t\toptions?: { raw?: boolean | undefined }): Promise<Array<FormTemplate>>;\n\n\tgetFormTemplates(options?: { loadLayout?: boolean | undefined, raw?: boolean | undefined }): Promise<Array<FormTemplate>>;\n\n\tcreateFormTemplate(formTemplate: FormTemplate): Promise<FormTemplate>;\n\n\tdeleteFormTemplate(formTemplateId: string): Promise<DocIdentifier>;\n\n\tupdateFormTemplate(formTemplate: FormTemplate): Promise<FormTemplate>;\n\n\tsetTemplateAttachment(formTemplateId: string, payload: Int8Array): Promise<string>;\n\n\tshareWith(delegateId: string, form: DecryptedForm,\n\t\t\toptions?: { options?: FormShareOptions | undefined }): Promise<DecryptedForm>;\n\n\tshareWithMany(form: DecryptedForm,\n\t\t\tdelegates: { [ key: string ]: FormShareOptions }): Promise<DecryptedForm>;\n\n\tfindFormsByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<DecryptedForm>>;\n\n\tfilterFormsBy(filter: FilterOptions<Form>): Promise<PaginatedListIterator<DecryptedForm>>;\n\n\tfilterFormsBySorted(filter: SortableFilterOptions<Form>): Promise<PaginatedListIterator<DecryptedForm>>;\n\n\tmodifyForm(entity: DecryptedForm): Promise<DecryptedForm>;\n\n\tundeleteFormById(id: string, rev: string): Promise<DecryptedForm>;\n\n\tundeleteForm(form: Form): Promise<DecryptedForm>;\n\n\tmodifyForms(entities: Array<DecryptedForm>): Promise<Array<DecryptedForm>>;\n\n\tgetForm(entityId: string): Promise<DecryptedForm>;\n\n\tgetForms(entityIds: Array<string>): Promise<Array<DecryptedForm>>;\n\n\tgetLatestFormByLogicalUuid(logicalUuid: string): Promise<DecryptedForm>;\n\n\tgetLatestFormByUniqueId(uniqueId: string): Promise<DecryptedForm>;\n\n\tgetFormsByLogicalUuid(logicalUuid: string): Promise<Array<DecryptedForm>>;\n\n\tgetFormsByUniqueId(uniqueId: string): Promise<Array<DecryptedForm>>;\n\n\tgetChildrenForms(hcPartyId: string, parentId: string): Promise<Array<DecryptedForm>>;\n\n}\n"]}