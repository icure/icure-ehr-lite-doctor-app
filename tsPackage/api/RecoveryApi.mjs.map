{"version":3,"file":"RecoveryApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/RecoveryApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {XRsaKeypair} from '../cardinal-sdk-ts.mjs';\nimport {RecoveryDataKey} from '../crypto/entities/RecoveryDataKey.mjs';\nimport {RecoveryDataUseFailureReason} from '../crypto/entities/RecoveryDataUseFailureReason.mjs';\nimport {RecoveryKeyOptions} from '../crypto/entities/RecoveryKeyOptions.mjs';\nimport {RecoveryKeySize} from '../crypto/entities/RecoveryKeySize.mjs';\nimport {RecoveryResult} from '../crypto/entities/RecoveryResult.mjs';\nimport {CancellablePromise} from '../utils/CancellablePromise.mjs';\n\n\nexport interface RecoveryApi {\n\n\tcreateRecoveryInfoForAvailableKeyPairs(options?: { includeParentsKeys?: boolean, lifetimeSeconds?: number | undefined, recoveryKeyOptions?: RecoveryKeyOptions | undefined }): Promise<RecoveryDataKey>;\n\n\trecoverKeyPairs(recoveryKey: RecoveryDataKey,\n\t\t\tautoDelete: boolean): Promise<RecoveryResult<{ [ key: string ]: { [ key: string ]: XRsaKeypair } }>>;\n\n\trecoverKeyPairsWaitingForCreation(recoveryKey: RecoveryDataKey, autoDelete: boolean,\n\t\t\twaitSeconds: number): CancellablePromise<RecoveryResult<{ [ key: string ]: { [ key: string ]: XRsaKeypair } }>>;\n\n\tcreateExchangeDataRecoveryInfo(delegateId: string,\n\t\t\toptions?: { lifetimeSeconds?: number | undefined, recoveryKeyOptions?: RecoveryKeyOptions | undefined }): Promise<RecoveryDataKey>;\n\n\trecoverExchangeData(recoveryKey: RecoveryDataKey): Promise<RecoveryDataUseFailureReason | undefined>;\n\n\tpurgeRecoveryInfo(recoveryKey: RecoveryDataKey): Promise<void>;\n\n\tpurgeAllRecoveryInfoFor(dataOwnerId: string): Promise<number>;\n\n\tpurgeAllKeyPairRecoveryInfoFor(dataOwnerId: string): Promise<number>;\n\n\tpurgeAllExchangeDataRecoveryInfoFor(dataOwnerId: string): Promise<number>;\n\n\tpreGenerateRecoveryKey(keySize: RecoveryKeySize): Promise<RecoveryDataKey>;\n\n}\n"]}