{"version":3,"file":"AgendaApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/AgendaApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {BaseFilterOptions, BaseSortableFilterOptions, PaginatedListIterator} from '../cardinal-sdk-ts.mjs';\nimport {Agenda} from '../model/Agenda.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\n\n\nexport interface AgendaApi {\n\n\tgetAllAgendas(startDocumentId: string | undefined,\n\t\t\tlimit: number | undefined): Promise<PaginatedList<Agenda>>;\n\n\tcreateAgenda(agendaDto: Agenda): Promise<Agenda>;\n\n\tdeleteAgendaUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteAgendasUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteAgendaById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteAgendasByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeAgendaById(id: string, rev: string): Promise<void>;\n\n\tundeleteAgendaById(id: string, rev: string): Promise<Agenda>;\n\n\tdeleteAgenda(agenda: Agenda): Promise<DocIdentifier>;\n\n\tdeleteAgendas(agendas: Array<Agenda>): Promise<Array<DocIdentifier>>;\n\n\tpurgeAgenda(agenda: Agenda): Promise<void>;\n\n\tundeleteAgenda(agenda: Agenda): Promise<Agenda>;\n\n\tgetAgenda(agendaId: string): Promise<Agenda>;\n\n\tgetAgendas(agendaIds: Array<string>): Promise<Array<Agenda>>;\n\n\tgetAgendasForUser(userId: string): Promise<Agenda>;\n\n\tgetReadableAgendasForUser(userId: string): Promise<Array<Agenda>>;\n\n\tmodifyAgenda(agendaDto: Agenda): Promise<Agenda>;\n\n\tmatchAgendasBy(filter: BaseFilterOptions<Agenda>): Promise<Array<string>>;\n\n\tmatchAgendasBySorted(filter: BaseSortableFilterOptions<Agenda>): Promise<Array<string>>;\n\n\tfilterAgendasBy(filter: BaseFilterOptions<Agenda>): Promise<PaginatedListIterator<Agenda>>;\n\n\tfilterAgendasBySorted(filter: BaseSortableFilterOptions<Agenda>): Promise<PaginatedListIterator<Agenda>>;\n\n}\n"]}