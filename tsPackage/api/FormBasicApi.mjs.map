{"version":3,"file":"FormBasicApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/FormBasicApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {BaseFilterOptions, BaseSortableFilterOptions, PaginatedListIterator} from '../cardinal-sdk-ts.mjs';\nimport {EncryptedForm, Form} from '../model/Form.mjs';\nimport {FormTemplate} from '../model/FormTemplate.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\n\n\nexport interface FormBasicApi {\n\n\tmatchFormsBy(filter: BaseFilterOptions<Form>): Promise<Array<string>>;\n\n\tmatchFormsBySorted(filter: BaseSortableFilterOptions<Form>): Promise<Array<string>>;\n\n\tfilterFormsBy(filter: BaseFilterOptions<Form>): Promise<PaginatedListIterator<EncryptedForm>>;\n\n\tfilterFormsBySorted(filter: BaseSortableFilterOptions<Form>): Promise<PaginatedListIterator<EncryptedForm>>;\n\n\tdeleteFormUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteFormsUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteFormById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteFormsByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeFormById(id: string, rev: string): Promise<void>;\n\n\tdeleteForm(form: Form): Promise<DocIdentifier>;\n\n\tdeleteForms(forms: Array<Form>): Promise<Array<DocIdentifier>>;\n\n\tpurgeForm(form: Form): Promise<void>;\n\n\tgetFormTemplate(formTemplateId: string,\n\t\t\toptions?: { raw?: boolean | undefined }): Promise<FormTemplate>;\n\n\tgetFormTemplatesByGuid(formTemplateGuid: string, specialityCode: string,\n\t\t\traw: boolean | undefined): Promise<Array<FormTemplate>>;\n\n\tlistFormTemplatesBySpeciality(specialityCode: string,\n\t\t\toptions?: { raw?: boolean | undefined }): Promise<Array<FormTemplate>>;\n\n\tgetFormTemplates(options?: { loadLayout?: boolean | undefined, raw?: boolean | undefined }): Promise<Array<FormTemplate>>;\n\n\tcreateFormTemplate(formTemplate: FormTemplate): Promise<FormTemplate>;\n\n\tdeleteFormTemplate(formTemplateId: string): Promise<DocIdentifier>;\n\n\tupdateFormTemplate(formTemplate: FormTemplate): Promise<FormTemplate>;\n\n\tsetTemplateAttachment(formTemplateId: string, payload: Int8Array): Promise<string>;\n\n\tmodifyForm(entity: EncryptedForm): Promise<EncryptedForm>;\n\n\tundeleteFormById(id: string, rev: string): Promise<EncryptedForm>;\n\n\tundeleteForm(form: Form): Promise<EncryptedForm>;\n\n\tmodifyForms(entities: Array<EncryptedForm>): Promise<Array<EncryptedForm>>;\n\n\tgetForm(entityId: string): Promise<EncryptedForm>;\n\n\tgetForms(entityIds: Array<string>): Promise<Array<EncryptedForm>>;\n\n\tgetLatestFormByLogicalUuid(logicalUuid: string): Promise<EncryptedForm>;\n\n\tgetLatestFormByUniqueId(uniqueId: string): Promise<EncryptedForm>;\n\n\tgetFormsByLogicalUuid(logicalUuid: string): Promise<Array<EncryptedForm>>;\n\n\tgetFormsByUniqueId(uniqueId: string): Promise<Array<EncryptedForm>>;\n\n\tgetChildrenForms(hcPartyId: string, parentId: string): Promise<Array<EncryptedForm>>;\n\n}\n"]}