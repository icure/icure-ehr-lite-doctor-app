{"version":3,"file":"AccessLogBasicApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/AccessLogBasicApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {BaseFilterOptions, BaseSortableFilterOptions, PaginatedListIterator} from '../cardinal-sdk-ts.mjs';\nimport {AccessLog, EncryptedAccessLog} from '../model/AccessLog.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\n\n\nexport interface AccessLogBasicApi {\n\n\tmatchAccessLogsBy(filter: BaseFilterOptions<AccessLog>): Promise<Array<string>>;\n\n\tmatchAccessLogsBySorted(filter: BaseSortableFilterOptions<AccessLog>): Promise<Array<string>>;\n\n\tfilterAccessLogsBy(filter: BaseFilterOptions<AccessLog>): Promise<PaginatedListIterator<EncryptedAccessLog>>;\n\n\tfilterAccessLogsBySorted(filter: BaseSortableFilterOptions<AccessLog>): Promise<PaginatedListIterator<EncryptedAccessLog>>;\n\n\tdeleteAccessLogUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteAccessLogsUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteAccessLogById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteAccessLogsByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeAccessLogById(id: string, rev: string): Promise<void>;\n\n\tdeleteAccessLog(accessLog: AccessLog): Promise<DocIdentifier>;\n\n\tdeleteAccessLogs(accessLogs: Array<AccessLog>): Promise<Array<DocIdentifier>>;\n\n\tpurgeAccessLog(accessLog: AccessLog): Promise<void>;\n\n\tundeleteAccessLogById(id: string, rev: string): Promise<EncryptedAccessLog>;\n\n\tundeleteAccessLog(accessLog: AccessLog): Promise<EncryptedAccessLog>;\n\n\tmodifyAccessLog(entity: EncryptedAccessLog): Promise<EncryptedAccessLog>;\n\n\tgetAccessLog(entityId: string): Promise<EncryptedAccessLog>;\n\n\tgetAccessLogs(entityIds: Array<string>): Promise<Array<EncryptedAccessLog>>;\n\n\tfindAccessLogsBy(\n\t\t\tfromEpoch: number | undefined,\n\t\t\ttoEpoch: number | undefined,\n\t\t\tstartKey: number | undefined,\n\t\t\tstartDocumentId: string | undefined,\n\t\t\tlimit: number | undefined\n\t): Promise<PaginatedList<EncryptedAccessLog>>;\n\n\tfindAccessLogsByUserAfterDate(userId: string,\n\t\t\toptions?: { accessType?: string | undefined, startDate?: number | undefined, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedList<EncryptedAccessLog>>;\n\n\tfindAccessLogsInGroup(groupId: string,\n\t\t\toptions?: { fromEpoch?: number | undefined, toEpoch?: number | undefined, startKey?: number | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<EncryptedAccessLog>>;\n\n}\n"]}