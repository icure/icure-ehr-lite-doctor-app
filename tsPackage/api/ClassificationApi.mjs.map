{"version":3,"file":"ClassificationApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/ClassificationApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {ClassificationShareOptions} from '../crypto/entities/ClassificationShareOptions.mjs';\nimport {SecretIdUseOption} from '../crypto/entities/SecretIdUseOption.mjs';\nimport {Classification, DecryptedClassification, EncryptedClassification} from '../model/Classification.mjs';\nimport {Patient} from '../model/Patient.mjs';\nimport {User} from '../model/User.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {AccessLevel} from '../model/embed/AccessLevel.mjs';\nimport {HexString} from '../model/specializations/HexString.mjs';\nimport {ClassificationFlavouredApi} from './ClassificationFlavouredApi.mjs';\n\n\nexport interface ClassificationApi {\n\n\tencrypted: ClassificationFlavouredApi<EncryptedClassification>;\n\n\ttryAndRecover: ClassificationFlavouredApi<Classification>;\n\n\tcreateClassification(entity: DecryptedClassification): Promise<DecryptedClassification>;\n\n\twithEncryptionMetadata(base: DecryptedClassification | undefined, patient: Patient,\n\t\t\toptions?: { user?: User | undefined, delegates?: { [ key: string ]: AccessLevel }, secretId?: SecretIdUseOption }): Promise<DecryptedClassification>;\n\n\tgetEncryptionKeysOf(classification: Classification): Promise<Array<HexString>>;\n\n\thasWriteAccess(classification: Classification): Promise<boolean>;\n\n\tdecryptPatientIdOf(classification: Classification): Promise<Array<string>>;\n\n\tcreateDelegationDeAnonymizationMetadata(entity: Classification,\n\t\t\tdelegates: Array<string>): Promise<void>;\n\n\tdecrypt(classification: EncryptedClassification): Promise<DecryptedClassification>;\n\n\ttryDecrypt(classification: EncryptedClassification): Promise<Classification>;\n\n\tmatchClassificationsBy(filter: FilterOptions<Classification>): Promise<Array<string>>;\n\n\tmatchClassificationsBySorted(filter: SortableFilterOptions<Classification>): Promise<Array<string>>;\n\n\tdeleteClassification(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteClassifications(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tshareWith(delegateId: string, classification: DecryptedClassification,\n\t\t\toptions?: { options?: ClassificationShareOptions | undefined }): Promise<DecryptedClassification>;\n\n\tshareWithMany(classification: DecryptedClassification,\n\t\t\tdelegates: { [ key: string ]: ClassificationShareOptions }): Promise<DecryptedClassification>;\n\n\tfindClassificationsByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<DecryptedClassification>>;\n\n\tfilterClassificationsBy(filter: FilterOptions<Classification>): Promise<PaginatedListIterator<DecryptedClassification>>;\n\n\tfilterClassificationsBySorted(filter: SortableFilterOptions<Classification>): Promise<PaginatedListIterator<DecryptedClassification>>;\n\n\tmodifyClassification(entity: DecryptedClassification): Promise<DecryptedClassification>;\n\n\tgetClassification(entityId: string): Promise<DecryptedClassification>;\n\n\tgetClassifications(entityIds: Array<string>): Promise<Array<DecryptedClassification>>;\n\n}\n"]}