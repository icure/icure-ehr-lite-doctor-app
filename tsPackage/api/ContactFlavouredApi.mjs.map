{"version":3,"file":"ContactFlavouredApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/ContactFlavouredApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {ContactShareOptions} from '../crypto/entities/ContactShareOptions.mjs';\nimport {Contact} from '../model/Contact.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {Patient} from '../model/Patient.mjs';\nimport {Service} from '../model/embed/Service.mjs';\n\n\nexport interface ContactFlavouredApi<E extends Contact, S extends Service> {\n\n\tshareWith(delegateId: string, contact: E,\n\t\t\toptions?: { options?: ContactShareOptions | undefined }): Promise<E>;\n\n\tshareWithMany(contact: E, delegates: { [ key: string ]: ContactShareOptions }): Promise<E>;\n\n\tfindContactsByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<E>>;\n\n\tfilterContactsBy(filter: FilterOptions<Contact>): Promise<PaginatedListIterator<E>>;\n\n\tfilterServicesBy(filter: FilterOptions<Service>): Promise<PaginatedListIterator<S>>;\n\n\tfilterContactsBySorted(filter: SortableFilterOptions<Contact>): Promise<PaginatedListIterator<E>>;\n\n\tfilterServicesBySorted(filter: SortableFilterOptions<Service>): Promise<PaginatedListIterator<S>>;\n\n\tundeleteContactById(id: string, rev: string): Promise<E>;\n\n\tundeleteContact(contact: Contact): Promise<E>;\n\n\tmodifyContact(entity: E): Promise<E>;\n\n\tmodifyContacts(entities: Array<E>): Promise<Array<E>>;\n\n\tgetContact(entityId: string): Promise<E>;\n\n\tgetContacts(entityIds: Array<string>): Promise<Array<E>>;\n\n\tlistContactByHCPartyServiceId(hcPartyId: string, serviceId: string): Promise<Array<E>>;\n\n\tlistContactsByExternalId(externalId: string): Promise<Array<E>>;\n\n\tlistContactsByHCPartyAndFormId(hcPartyId: string, formId: string): Promise<Array<E>>;\n\n\tlistContactsByHCPartyAndFormIds(hcPartyId: string, formIds: Array<string>): Promise<Array<E>>;\n\n\tgetService(serviceId: string): Promise<S>;\n\n\tgetServices(entityIds: Array<string>): Promise<Array<S>>;\n\n\tgetServicesLinkedTo(linkType: string, ids: Array<string>): Promise<Array<S>>;\n\n\tlistServicesByAssociationId(associationId: string): Promise<Array<S>>;\n\n\tlistServicesByHealthElementId(hcPartyId: string, healthElementId: string): Promise<Array<S>>;\n\n\tfindContactsByOpeningDate(startDate: number, endDate: number, hcPartyId: string,\n\t\t\toptions?: { startKey?: any | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<E>>;\n\n}\n"]}