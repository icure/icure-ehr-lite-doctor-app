{"version":3,"file":"TimeTableFlavouredApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/TimeTableFlavouredApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {TimeTableShareOptions} from '../crypto/entities/TimeTableShareOptions.mjs';\nimport {TimeTable} from '../model/TimeTable.mjs';\n\n\nexport interface TimeTableFlavouredApi<E extends TimeTable> {\n\n\tshareWith(delegateId: string, timeTable: E,\n\t\t\toptions?: { options?: TimeTableShareOptions | undefined }): Promise<E>;\n\n\tshareWithMany(timeTable: E, delegates: { [ key: string ]: TimeTableShareOptions }): Promise<E>;\n\n\tfilterTimeTablesBy(filter: FilterOptions<TimeTable>): Promise<PaginatedListIterator<E>>;\n\n\tfilterTimeTablesBySorted(filter: SortableFilterOptions<TimeTable>): Promise<PaginatedListIterator<E>>;\n\n\tundeleteTimeTable(timeTable: TimeTable): Promise<TimeTable>;\n\n\tmodifyTimeTable(entity: E): Promise<E>;\n\n\tundeleteTimeTableById(id: string, rev: string): Promise<E>;\n\n\tgetTimeTable(entityId: string): Promise<E>;\n\n\tgetTimeTables(timeTableIds: Array<string>): Promise<Array<E>>;\n\n\tgetTimeTablesByPeriodAndAgendaId(startDate: number, endDate: number,\n\t\t\tagendaId: string): Promise<Array<E>>;\n\n\tgetTimeTablesByAgendaId(agendaId: string): Promise<Array<E>>;\n\n}\n"]}