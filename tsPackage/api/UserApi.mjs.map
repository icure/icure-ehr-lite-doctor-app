{"version":3,"file":"UserApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/UserApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {BaseFilterOptions, BaseSortableFilterOptions, FilterOptions, PaginatedListIterator} from '../cardinal-sdk-ts.mjs';\nimport {ListOfIds} from '../model/ListOfIds.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {EncryptedPropertyStub} from '../model/PropertyStub.mjs';\nimport {User} from '../model/User.mjs';\nimport {UserGroup} from '../model/UserGroup.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {Enable2faRequest} from '../model/security/Enable2faRequest.mjs';\nimport {TokenWithGroup} from '../model/security/TokenWithGroup.mjs';\nimport {EntitySubscription} from '../subscription/EntitySubscription.mjs';\nimport {EntitySubscriptionConfiguration} from '../subscription/EntitySubscriptionConfiguration.mjs';\nimport {SubscriptionEventType} from '../subscription/SubscriptionEventType.mjs';\n\n\nexport interface UserApi {\n\n\tdeleteUserUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tgetCurrentUser(): Promise<User>;\n\n\tlistUsersBy(options?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, skipPatients?: boolean | undefined }): Promise<PaginatedList<User>>;\n\n\tcreateUser(user: User): Promise<User>;\n\n\tgetUser(userId: string): Promise<User>;\n\n\tgetUsers(userIds: Array<string>): Promise<Array<User>>;\n\n\tgetUserByEmail(email: string): Promise<User>;\n\n\tgetUserByPhoneNumber(phoneNumber: string): Promise<User>;\n\n\tfindByHcpartyId(id: string): Promise<Array<string>>;\n\n\tfindByPatientId(id: string): Promise<Array<string>>;\n\n\tmodifyUser(user: User): Promise<User>;\n\n\tassignHealthcareParty(healthcarePartyId: string): Promise<User>;\n\n\tmodifyProperties(userId: string,\n\t\t\tproperties: Array<EncryptedPropertyStub> | undefined): Promise<User>;\n\n\tgetToken(userId: string, key: string,\n\t\t\toptions?: { tokenValidity?: number | undefined, token?: string | undefined }): Promise<string>;\n\n\tfilterUsersBy(filter: BaseFilterOptions<User>): Promise<PaginatedListIterator<User>>;\n\n\tmatchUsersBy(filter: BaseFilterOptions<User>): Promise<Array<string>>;\n\n\tfilterUsersBySorted(filter: BaseSortableFilterOptions<User>): Promise<PaginatedListIterator<User>>;\n\n\tmatchUsersBySorted(filter: BaseSortableFilterOptions<User>): Promise<Array<string>>;\n\n\tgetMatchingUsers(): Promise<Array<UserGroup>>;\n\n\tgetUsersInGroup(groupId: string, userIds: Array<string>): Promise<Array<User>>;\n\n\tlistUsersInGroup(groupId: string,\n\t\t\toptions?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<User>>;\n\n\tcreateUserInGroup(groupId: string, user: User): Promise<User>;\n\n\tmodifyUserInGroup(groupId: string, user: User): Promise<User>;\n\n\tsetUserRoles(userId: string, rolesId: ListOfIds): Promise<User>;\n\n\tsetUserRolesInGroup(userId: string, groupId: string, rolesId: ListOfIds): Promise<User>;\n\n\tresetUserRoles(userId: string): Promise<User>;\n\n\tresetUserRolesInGroup(userId: string, groupId: string): Promise<User>;\n\n\tgetTokenInGroup(groupId: string, userId: string, key: string,\n\t\t\toptions?: { token?: string | undefined, tokenValidity?: number | undefined }): Promise<string>;\n\n\tgetTokenInAllGroups(userIdentifier: string, key: string,\n\t\t\toptions?: { token?: string | undefined, tokenValidity?: number | undefined }): Promise<Array<TokenWithGroup>>;\n\n\tfilterUsersInGroupBy(groupId: string,\n\t\t\tfilter: BaseFilterOptions<User>): Promise<PaginatedListIterator<User>>;\n\n\tmatchUsersInGroupBy(groupId: string, filter: BaseFilterOptions<User>): Promise<Array<string>>;\n\n\tfilterUsersInGroupBySorted(groupId: string,\n\t\t\tfilter: BaseSortableFilterOptions<User>): Promise<PaginatedListIterator<User>>;\n\n\tmatchUsersInGroupBySorted(groupId: string,\n\t\t\tfilter: BaseSortableFilterOptions<User>): Promise<Array<string>>;\n\n\tenable2faForUser(userId: string, groupId: string, request: Enable2faRequest): Promise<void>;\n\n\tenable2faForUser(userId: string, request: Enable2faRequest): Promise<void>;\n\n\tdisable2faForUser(userId: string, groupId: string): Promise<void>;\n\n\tdisable2faForUser(userId: string): Promise<void>;\n\n\tcreateAdminUser(user: User): Promise<User>;\n\n\tcreateAdminUserInGroup(groupId: string, user: User): Promise<User>;\n\n\tdeleteUserById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteUserInGroupById(groupId: string, entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tpurgeUserById(id: string, rev: string): Promise<void>;\n\n\tundeleteUserById(id: string, rev: string): Promise<User>;\n\n\tdeleteUser(user: User): Promise<DocIdentifier>;\n\n\tdeleteUserInGroup(groupId: string, user: User): Promise<DocIdentifier>;\n\n\tpurgeUser(user: User): Promise<void>;\n\n\tundeleteUser(user: User): Promise<User>;\n\n\tsubscribeToEvents(events: Array<SubscriptionEventType>, filter: FilterOptions<User>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<User>>;\n\n}\n"]}