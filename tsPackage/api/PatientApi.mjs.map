{"version":3,"file":"PatientApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/PatientApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {EntityAccessInformation} from '../crypto/entities/EntityAccessInformation.mjs';\nimport {EntityWithTypeInfo} from '../crypto/entities/EntityWithTypeInfo.mjs';\nimport {PatientShareOptions} from '../crypto/entities/PatientShareOptions.mjs';\nimport {ShareAllPatientDataOptions} from '../crypto/entities/ShareAllPatientDataOptions.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {IdWithRev} from '../model/IdWithRev.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {DecryptedPatient, EncryptedPatient, Patient} from '../model/Patient.mjs';\nimport {User} from '../model/User.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {SortDirection} from '../model/couchdb/SortDirection.mjs';\nimport {AccessLevel} from '../model/embed/AccessLevel.mjs';\nimport {HexString} from '../model/specializations/HexString.mjs';\nimport {EntitySubscription} from '../subscription/EntitySubscription.mjs';\nimport {EntitySubscriptionConfiguration} from '../subscription/EntitySubscriptionConfiguration.mjs';\nimport {SubscriptionEventType} from '../subscription/SubscriptionEventType.mjs';\nimport {PatientFlavouredApi} from './PatientFlavouredApi.mjs';\n\n\nexport interface PatientApi {\n\n\tencrypted: PatientFlavouredApi<EncryptedPatient>;\n\n\ttryAndRecover: PatientFlavouredApi<Patient>;\n\n\tgetSecretIdsOf(patient: Patient): Promise<Array<string>>;\n\n\tgetEncryptionKeysOf(patient: Patient): Promise<Array<HexString>>;\n\n\tcreatePatient(patient: DecryptedPatient): Promise<DecryptedPatient>;\n\n\twithEncryptionMetadata(base: DecryptedPatient | undefined,\n\t\t\toptions?: { user?: User | undefined, delegates?: { [ key: string ]: AccessLevel } }): Promise<DecryptedPatient>;\n\n\thasWriteAccess(patient: Patient): Promise<boolean>;\n\n\tcreateDelegationDeAnonymizationMetadata(entity: Patient, delegates: Array<string>): Promise<void>;\n\n\tdecrypt(patient: EncryptedPatient): Promise<DecryptedPatient>;\n\n\ttryDecrypt(patient: EncryptedPatient): Promise<Patient>;\n\n\tcreatePatients(patientDtos: Array<DecryptedPatient>): Promise<Array<IdWithRev>>;\n\n\tshareAllDataOfPatient(patientId: string,\n\t\t\tdelegatesWithShareType: { [ key: string ]: Array<ShareAllPatientDataOptions.Tag> }): Promise<ShareAllPatientDataOptions.Result>;\n\n\tgetPatientIdOfChildDocumentForHcpAndHcpParents(childDocument: EntityWithTypeInfo<any>): Promise<string>;\n\n\tgetConfidentialSecretIdsOf(patient: Patient): Promise<Array<string>>;\n\n\tforceInitializeExchangeDataToNewlyInvitedPatient(patientId: string): Promise<boolean>;\n\n\tmatchPatientsBy(filter: FilterOptions<Patient>): Promise<Array<string>>;\n\n\tmatchPatientsBySorted(filter: SortableFilterOptions<Patient>): Promise<Array<string>>;\n\n\tensureEncryptionMetadataForSelfIsInitialized(options?: { sharingWith?: { [ key: string ]: AccessLevel } }): Promise<EncryptedPatient>;\n\n\tdeletePatientUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeletePatientsUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeletePatientById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeletePatientsByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgePatientById(id: string, rev: string): Promise<void>;\n\n\tdeletePatient(patient: Patient): Promise<DocIdentifier>;\n\n\tdeletePatients(patients: Array<Patient>): Promise<Array<DocIdentifier>>;\n\n\tpurgePatient(patient: Patient): Promise<void>;\n\n\tgetDataOwnersWithAccessTo(patient: Patient): Promise<EntityAccessInformation>;\n\n\tcountOfPatients(hcPartyId: string): Promise<number>;\n\n\tshareWith(delegateId: string, patient: DecryptedPatient,\n\t\t\toptions?: { options?: PatientShareOptions | undefined }): Promise<DecryptedPatient>;\n\n\tshareWithMany(patient: DecryptedPatient,\n\t\t\tdelegates: { [ key: string ]: PatientShareOptions }): Promise<DecryptedPatient>;\n\n\tinitializeConfidentialSecretId(patient: DecryptedPatient): Promise<DecryptedPatient>;\n\n\tfilterPatientsBy(filter: FilterOptions<Patient>): Promise<PaginatedListIterator<DecryptedPatient>>;\n\n\tfilterPatientsBySorted(filter: SortableFilterOptions<Patient>): Promise<PaginatedListIterator<DecryptedPatient>>;\n\n\tundeletePatient(patient: Patient): Promise<Patient>;\n\n\tmodifyPatient(entity: DecryptedPatient): Promise<DecryptedPatient>;\n\n\tundeletePatientById(id: string, rev: string): Promise<DecryptedPatient>;\n\n\tundeletePatients(ids: Array<IdWithMandatoryRev>): Promise<Array<DecryptedPatient>>;\n\n\tgetPatient(entityId: string): Promise<DecryptedPatient>;\n\n\tgetPatientResolvingMerges(patientId: string,\n\t\t\tmaxMergeDepth: number | undefined): Promise<DecryptedPatient>;\n\n\tfindPatientsByNameBirthSsinAuto(filterValue: string,\n\t\t\toptions?: { healthcarePartyId?: string | undefined, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, sortDirection?: SortDirection }): Promise<PaginatedList<DecryptedPatient>>;\n\n\tlistPatientsOfHcParty(hcPartyId: string,\n\t\t\toptions?: { sortField?: string, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, sortDirection?: SortDirection }): Promise<PaginatedList<DecryptedPatient>>;\n\n\tlistOfMergesAfter(date: number): Promise<Array<DecryptedPatient>>;\n\n\tfindPatientsModifiedAfter(date: number,\n\t\t\toptions?: { startKey?: number | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<DecryptedPatient>>;\n\n\tlistPatientsByHcParty(hcPartyId: string,\n\t\t\toptions?: { sortField?: string, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, sortDirection?: SortDirection }): Promise<PaginatedList<DecryptedPatient>>;\n\n\tfindPatientsByHealthcareParty(options?: { hcPartyId?: string | undefined, sortField?: string, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, sortDirection?: SortDirection }): Promise<PaginatedList<DecryptedPatient>>;\n\n\tfindPatientsIdsByHealthcareParty(hcPartyId: string,\n\t\t\toptions?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<string>>;\n\n\tgetPatientByExternalId(externalId: string): Promise<DecryptedPatient>;\n\n\tfuzzySearch(firstName: string, lastName: string,\n\t\t\toptions?: { dateOfBirth?: number | undefined }): Promise<Array<DecryptedPatient>>;\n\n\tfindDeletedPatients(startDate: number,\n\t\t\toptions?: { endDate?: number | undefined, desc?: boolean | undefined, startKey?: number | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<DecryptedPatient>>;\n\n\tlistDeletedPatientsByName(options?: { firstName?: string | undefined, lastName?: string | undefined }): Promise<Array<DecryptedPatient>>;\n\n\tgetPatients(patientIds: Array<string>): Promise<Array<DecryptedPatient>>;\n\n\tgetPatientByHealthcarePartyAndIdentifier(hcPartyId: string, id: string,\n\t\t\toptions?: { system?: string | undefined }): Promise<DecryptedPatient>;\n\n\tmodifyPatients(patientDtos: Array<EncryptedPatient>): Promise<Array<IdWithRev>>;\n\n\tfindDuplicatesBySsin(hcPartyId: string,\n\t\t\toptions?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<DecryptedPatient>>;\n\n\tfindDuplicatesByName(hcPartyId: string,\n\t\t\toptions?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<DecryptedPatient>>;\n\n\tmergePatients(from: Patient, mergedInto: DecryptedPatient): Promise<DecryptedPatient>;\n\n\tsubscribeToEvents(events: Array<SubscriptionEventType>, filter: FilterOptions<Patient>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<EncryptedPatient>>;\n\n}\n"]}