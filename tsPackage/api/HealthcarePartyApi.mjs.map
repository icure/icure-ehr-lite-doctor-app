{"version":3,"file":"HealthcarePartyApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/HealthcarePartyApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {BaseFilterOptions, BaseSortableFilterOptions, FilterOptions, PaginatedListIterator} from '../cardinal-sdk-ts.mjs';\nimport {DataOwnerRegistrationSuccess} from '../model/DataOwnerRegistrationSuccess.mjs';\nimport {HealthcareParty} from '../model/HealthcareParty.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {PublicKey} from '../model/PublicKey.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {EntitySubscription} from '../subscription/EntitySubscription.mjs';\nimport {EntitySubscriptionConfiguration} from '../subscription/EntitySubscriptionConfiguration.mjs';\nimport {SubscriptionEventType} from '../subscription/SubscriptionEventType.mjs';\n\n\nexport interface HealthcarePartyApi {\n\n\tdeleteHealthcarePartyUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteHealthcarePartiesUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tgetHealthcareParty(healthcarePartyId: string): Promise<HealthcareParty>;\n\n\tcreateHealthcareParty(p: HealthcareParty): Promise<HealthcareParty>;\n\n\tmodifyHealthcarePartyInGroup(groupId: string,\n\t\t\thealthcareParty: HealthcareParty): Promise<HealthcareParty>;\n\n\tcreateHealthcarePartyInGroup(groupId: string,\n\t\t\thealthcareParty: HealthcareParty): Promise<HealthcareParty>;\n\n\tgetCurrentHealthcareParty(): Promise<HealthcareParty>;\n\n\tfindHealthcarePartiesBy(options?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, desc?: boolean | undefined }): Promise<PaginatedList<HealthcareParty>>;\n\n\tfindHealthcarePartiesByName(options?: { name?: string | undefined, startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, desc?: boolean | undefined }): Promise<PaginatedList<HealthcareParty>>;\n\n\tfindHealthcarePartiesBySsinOrNihii(searchValue: string,\n\t\t\toptions?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined, desc?: boolean }): Promise<PaginatedList<HealthcareParty>>;\n\n\tlistHealthcarePartiesByName(name: string): Promise<Array<HealthcareParty>>;\n\n\tfindHealthcarePartiesBySpecialityAndPostCode(\n\t\t\ttype: string,\n\t\t\tspec: string,\n\t\t\tfirstCode: string,\n\t\t\tlastCode: string,\n\t\t\toptions?: { startKey?: string | undefined, startDocumentId?: string | undefined, limit?: number | undefined }\n\t): Promise<PaginatedList<HealthcareParty>>;\n\n\tgetHealthcareParties(healthcarePartyIds: Array<string>): Promise<Array<HealthcareParty>>;\n\n\tlistHealthcarePartiesByParentId(parentId: string): Promise<Array<HealthcareParty>>;\n\n\tgetPublicKey(healthcarePartyId: string): Promise<PublicKey>;\n\n\tmodifyHealthcareParty(healthcareParty: HealthcareParty): Promise<HealthcareParty>;\n\n\tmatchHealthcarePartiesBy(filter: BaseFilterOptions<HealthcareParty>): Promise<Array<string>>;\n\n\tfilterHealthPartiesBy(filter: BaseFilterOptions<HealthcareParty>): Promise<PaginatedListIterator<HealthcareParty>>;\n\n\tmatchHealthcarePartiesBySorted(filter: BaseSortableFilterOptions<HealthcareParty>): Promise<Array<string>>;\n\n\tfilterHealthPartiesBySorted(filter: BaseSortableFilterOptions<HealthcareParty>): Promise<PaginatedListIterator<HealthcareParty>>;\n\n\tgetHealthcarePartiesInGroup(groupId: string,\n\t\t\toptions?: { healthcarePartyIds?: Array<string> | undefined }): Promise<Array<HealthcareParty>>;\n\n\tregisterPatient(groupId: string, hcp: HealthcareParty,\n\t\t\toptions?: { parentHcPartyId?: string | undefined, token?: string | undefined, useShortToken?: boolean | undefined }): Promise<DataOwnerRegistrationSuccess>;\n\n\tdeleteHealthcarePartyById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteHealthcarePartiesByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tdeleteHealthcarePartyInGroupById(groupId: string, entityId: string,\n\t\t\trev: string): Promise<DocIdentifier>;\n\n\tdeleteHealthcarePartiesInGroupByIds(groupId: string,\n\t\t\tentityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeHealthcarePartyById(id: string, rev: string): Promise<void>;\n\n\tundeleteHealthcarePartyById(id: string, rev: string): Promise<HealthcareParty>;\n\n\tdeleteHealthcareParty(healthcareParty: HealthcareParty): Promise<DocIdentifier>;\n\n\tdeleteHealthcareParties(healthcareParties: Array<HealthcareParty>): Promise<Array<DocIdentifier>>;\n\n\tpurgeHealthcareParty(healthcareParty: HealthcareParty): Promise<void>;\n\n\tundeleteHealthcareParty(healthcareParty: HealthcareParty): Promise<HealthcareParty>;\n\n\tdeleteHealthcarePartyInGroup(groupId: string, hcp: HealthcareParty): Promise<DocIdentifier>;\n\n\tdeleteHealthcarePartiesInGroup(groupId: string,\n\t\t\thealthcareParties: Array<HealthcareParty>): Promise<Array<DocIdentifier>>;\n\n\tsubscribeToEvents(events: Array<SubscriptionEventType>, filter: FilterOptions<HealthcareParty>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<HealthcareParty>>;\n\n}\n"]}