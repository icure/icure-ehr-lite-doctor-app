{"version":3,"file":"MessageApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/MessageApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {MessageShareOptions} from '../crypto/entities/MessageShareOptions.mjs';\nimport {SecretIdUseOption} from '../crypto/entities/SecretIdUseOption.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {DecryptedMessage, EncryptedMessage, Message} from '../model/Message.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {Patient} from '../model/Patient.mjs';\nimport {User} from '../model/User.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {AccessLevel} from '../model/embed/AccessLevel.mjs';\nimport {HexString} from '../model/specializations/HexString.mjs';\nimport {EntitySubscription} from '../subscription/EntitySubscription.mjs';\nimport {EntitySubscriptionConfiguration} from '../subscription/EntitySubscriptionConfiguration.mjs';\nimport {SubscriptionEventType} from '../subscription/SubscriptionEventType.mjs';\nimport {MessageFlavouredApi} from './MessageFlavouredApi.mjs';\n\n\nexport interface MessageApi {\n\n\tencrypted: MessageFlavouredApi<EncryptedMessage>;\n\n\ttryAndRecover: MessageFlavouredApi<Message>;\n\n\tcreateMessage(entity: DecryptedMessage): Promise<DecryptedMessage>;\n\n\tcreateMessageInTopic(entity: DecryptedMessage): Promise<DecryptedMessage>;\n\n\twithEncryptionMetadata(base: DecryptedMessage | undefined, patient: Patient | undefined,\n\t\t\toptions?: { user?: User | undefined, delegates?: { [ key: string ]: AccessLevel }, secretId?: SecretIdUseOption }): Promise<DecryptedMessage>;\n\n\tgetEncryptionKeysOf(message: Message): Promise<Array<HexString>>;\n\n\thasWriteAccess(message: Message): Promise<boolean>;\n\n\tdecryptPatientIdOf(message: Message): Promise<Array<string>>;\n\n\tcreateDelegationDeAnonymizationMetadata(entity: Message, delegates: Array<string>): Promise<void>;\n\n\tdecrypt(message: EncryptedMessage): Promise<DecryptedMessage>;\n\n\ttryDecrypt(message: EncryptedMessage): Promise<Message>;\n\n\tmatchMessagesBy(filter: FilterOptions<Message>): Promise<Array<string>>;\n\n\tmatchMessagesBySorted(filter: SortableFilterOptions<Message>): Promise<Array<string>>;\n\n\tdeleteMessageUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteMessagesUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteMessageById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteMessagesByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeMessageById(id: string, rev: string): Promise<void>;\n\n\tdeleteMessage(message: Message): Promise<DocIdentifier>;\n\n\tdeleteMessages(messages: Array<Message>): Promise<Array<DocIdentifier>>;\n\n\tpurgeMessage(message: Message): Promise<void>;\n\n\tshareWith(delegateId: string, message: DecryptedMessage,\n\t\t\toptions?: { options?: MessageShareOptions | undefined }): Promise<DecryptedMessage>;\n\n\tshareWithMany(message: DecryptedMessage,\n\t\t\tdelegates: { [ key: string ]: MessageShareOptions }): Promise<DecryptedMessage>;\n\n\tfindMessagesByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<DecryptedMessage>>;\n\n\tfilterMessagesBy(filter: FilterOptions<Message>): Promise<PaginatedListIterator<DecryptedMessage>>;\n\n\tfilterMessagesBySorted(filter: SortableFilterOptions<Message>): Promise<PaginatedListIterator<DecryptedMessage>>;\n\n\tundeleteMessage(message: Message): Promise<Message>;\n\n\tmodifyMessage(entity: DecryptedMessage): Promise<DecryptedMessage>;\n\n\tundeleteMessageById(id: string, rev: string): Promise<DecryptedMessage>;\n\n\tgetMessage(entityId: string): Promise<DecryptedMessage>;\n\n\tgetMessages(entityIds: Array<string>): Promise<Array<DecryptedMessage>>;\n\n\tlistMessagesByTransportGuids(hcPartyId: string,\n\t\t\ttransportGuids: Array<string>): Promise<Array<DecryptedMessage>>;\n\n\tfindMessages(startKey: any | undefined, startDocumentId: string | undefined,\n\t\t\tlimit: number | undefined): Promise<PaginatedList<DecryptedMessage>>;\n\n\tgetChildrenMessages(messageId: string): Promise<Array<DecryptedMessage>>;\n\n\tgetMessagesChildren(messageIds: Array<string>): Promise<Array<DecryptedMessage>>;\n\n\tlistMessagesByInvoices(invoiceIds: Array<string>): Promise<Array<DecryptedMessage>>;\n\n\tfindMessagesByTransportGuid(transportGuid: string): Promise<PaginatedList<DecryptedMessage>>;\n\n\tfindMessagesByTransportGuidSentDate(transportGuid: string, from: number, to: number,\n\t\t\toptions?: { startKey?: any | undefined, startDocumentId?: string | undefined, limit?: number | undefined, hcpId?: string | undefined }): Promise<PaginatedList<DecryptedMessage>>;\n\n\tfindMessagesByToAddress(toAddress: string, startKey: any | undefined,\n\t\t\tstartDocumentId: string | undefined,\n\t\t\tlimit: number | undefined): Promise<PaginatedList<DecryptedMessage>>;\n\n\tfindMessagesByFromAddress(fromAddress: string, startKey: any | undefined,\n\t\t\tstartDocumentId: string | undefined,\n\t\t\tlimit: number | undefined): Promise<PaginatedList<DecryptedMessage>>;\n\n\tsetMessagesStatusBits(entityIds: Array<string>,\n\t\t\tstatusBits: number): Promise<Array<DecryptedMessage>>;\n\n\tsetMessagesReadStatus(entityIds: Array<string>, time: number | undefined, readStatus: boolean,\n\t\t\tuserId: string | undefined): Promise<Array<DecryptedMessage>>;\n\n\tsubscribeToEvents(events: Array<SubscriptionEventType>, filter: FilterOptions<Message>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<EncryptedMessage>>;\n\n}\n"]}