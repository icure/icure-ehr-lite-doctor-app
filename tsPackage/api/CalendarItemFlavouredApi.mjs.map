{"version":3,"file":"CalendarItemFlavouredApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/CalendarItemFlavouredApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {CalendarItemShareOptions} from '../crypto/entities/CalendarItemShareOptions.mjs';\nimport {CalendarItem} from '../model/CalendarItem.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {Patient} from '../model/Patient.mjs';\n\n\nexport interface CalendarItemFlavouredApi<E extends CalendarItem> {\n\n\tshareWith(delegateId: string, calendarItem: E,\n\t\t\toptions?: { options?: CalendarItemShareOptions | undefined }): Promise<E>;\n\n\tshareWithMany(calendarItem: E,\n\t\t\tdelegates: { [ key: string ]: CalendarItemShareOptions }): Promise<E>;\n\n\tfindCalendarItemsByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<E>>;\n\n\tlinkToPatient(calendarItem: CalendarItem, patient: Patient,\n\t\t\tshareLinkWithDelegates: Array<string>): Promise<E>;\n\n\tfilterCalendarItemsBy(filter: FilterOptions<CalendarItem>): Promise<PaginatedListIterator<E>>;\n\n\tfilterCalendarItemsBySorted(filter: SortableFilterOptions<CalendarItem>): Promise<PaginatedListIterator<E>>;\n\n\tundeleteCalendarItemById(id: string, rev: string): Promise<E>;\n\n\tundeleteCalendarItem(calendarItem: CalendarItem): Promise<E>;\n\n\tmodifyCalendarItem(entity: E): Promise<E>;\n\n\tgetCalendarItem(entityId: string): Promise<E>;\n\n\tgetCalendarItems(entityIds: Array<string>): Promise<Array<E>>;\n\n\tgetCalendarItemsByPeriodAndHcPartyId(startDate: number, endDate: number,\n\t\t\thcPartyId: string): Promise<Array<E>>;\n\n\tgetCalendarsByPeriodAndAgendaId(startDate: number, endDate: number,\n\t\t\tagendaId: string): Promise<Array<E>>;\n\n\tfindCalendarItemsByRecurrenceId(recurrenceId: string, startKey: string | undefined,\n\t\t\tstartDocumentId: string | undefined, limit: number): Promise<PaginatedList<E>>;\n\n}\n"]}