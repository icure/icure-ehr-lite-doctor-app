{"version":3,"file":"ContactBasicApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/ContactBasicApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {BaseFilterOptions, BaseSortableFilterOptions, PaginatedListIterator} from '../cardinal-sdk-ts.mjs';\nimport {Contact, EncryptedContact} from '../model/Contact.mjs';\nimport {IdWithMandatoryRev} from '../model/IdWithMandatoryRev.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {DocIdentifier} from '../model/couchdb/DocIdentifier.mjs';\nimport {LabelledOccurence} from '../model/data/LabelledOccurence.mjs';\nimport {EncryptedService, Service} from '../model/embed/Service.mjs';\nimport {EntitySubscription} from '../subscription/EntitySubscription.mjs';\nimport {EntitySubscriptionConfiguration} from '../subscription/EntitySubscriptionConfiguration.mjs';\nimport {SubscriptionEventType} from '../subscription/SubscriptionEventType.mjs';\n\n\nexport interface ContactBasicApi {\n\n\tmatchContactsBy(filter: BaseFilterOptions<Contact>): Promise<Array<string>>;\n\n\tmatchServicesBy(filter: BaseFilterOptions<Service>): Promise<Array<string>>;\n\n\tmatchContactsBySorted(filter: BaseSortableFilterOptions<Contact>): Promise<Array<string>>;\n\n\tmatchServicesBySorted(filter: BaseSortableFilterOptions<Service>): Promise<Array<string>>;\n\n\tfilterContactsBy(filter: BaseFilterOptions<Contact>): Promise<PaginatedListIterator<EncryptedContact>>;\n\n\tfilterServicesBy(filter: BaseFilterOptions<Service>): Promise<PaginatedListIterator<EncryptedService>>;\n\n\tfilterContactsBySorted(filter: BaseSortableFilterOptions<Contact>): Promise<PaginatedListIterator<EncryptedContact>>;\n\n\tfilterServicesBySorted(filter: BaseSortableFilterOptions<Service>): Promise<PaginatedListIterator<EncryptedService>>;\n\n\tsubscribeToServiceCreateOrUpdateEvents(filter: BaseFilterOptions<Service>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<EncryptedService>>;\n\n\tdeleteContactUnsafe(entityId: string): Promise<DocIdentifier>;\n\n\tdeleteContactsUnsafe(entityIds: Array<string>): Promise<Array<DocIdentifier>>;\n\n\tdeleteContactById(entityId: string, rev: string): Promise<DocIdentifier>;\n\n\tdeleteContactsByIds(entityIds: Array<IdWithMandatoryRev>): Promise<Array<DocIdentifier>>;\n\n\tpurgeContactById(id: string, rev: string): Promise<void>;\n\n\tdeleteContact(contact: Contact): Promise<DocIdentifier>;\n\n\tdeleteContacts(contacts: Array<Contact>): Promise<Array<DocIdentifier>>;\n\n\tpurgeContact(contact: Contact): Promise<void>;\n\n\tgetServiceCodesOccurrences(codeType: string,\n\t\t\tminOccurrences: number): Promise<Array<LabelledOccurence>>;\n\n\tundeleteContactById(id: string, rev: string): Promise<EncryptedContact>;\n\n\tundeleteContact(contact: Contact): Promise<EncryptedContact>;\n\n\tmodifyContact(entity: EncryptedContact): Promise<EncryptedContact>;\n\n\tmodifyContacts(entities: Array<EncryptedContact>): Promise<Array<EncryptedContact>>;\n\n\tgetContact(entityId: string): Promise<EncryptedContact>;\n\n\tgetContacts(entityIds: Array<string>): Promise<Array<EncryptedContact>>;\n\n\tlistContactByHCPartyServiceId(hcPartyId: string,\n\t\t\tserviceId: string): Promise<Array<EncryptedContact>>;\n\n\tlistContactsByExternalId(externalId: string): Promise<Array<EncryptedContact>>;\n\n\tlistContactsByHCPartyAndFormId(hcPartyId: string,\n\t\t\tformId: string): Promise<Array<EncryptedContact>>;\n\n\tlistContactsByHCPartyAndFormIds(hcPartyId: string,\n\t\t\tformIds: Array<string>): Promise<Array<EncryptedContact>>;\n\n\tgetService(serviceId: string): Promise<EncryptedService>;\n\n\tgetServices(entityIds: Array<string>): Promise<Array<EncryptedService>>;\n\n\tgetServicesLinkedTo(linkType: string, ids: Array<string>): Promise<Array<EncryptedService>>;\n\n\tlistServicesByAssociationId(associationId: string): Promise<Array<EncryptedService>>;\n\n\tlistServicesByHealthElementId(hcPartyId: string,\n\t\t\thealthElementId: string): Promise<Array<EncryptedService>>;\n\n\tfindContactsByOpeningDate(startDate: number, endDate: number, hcPartyId: string,\n\t\t\toptions?: { startKey?: any | undefined, startDocumentId?: string | undefined, limit?: number | undefined }): Promise<PaginatedList<EncryptedContact>>;\n\n\tsubscribeToEvents(events: Array<SubscriptionEventType>, filter: BaseFilterOptions<Contact>,\n\t\t\toptions?: { subscriptionConfig?: EntitySubscriptionConfiguration | undefined }): Promise<EntitySubscription<EncryptedContact>>;\n\n}\n"]}