{"version":3,"file":"MessageFlavouredApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/MessageFlavouredApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {MessageShareOptions} from '../crypto/entities/MessageShareOptions.mjs';\nimport {Message} from '../model/Message.mjs';\nimport {PaginatedList} from '../model/PaginatedList.mjs';\nimport {Patient} from '../model/Patient.mjs';\n\n\nexport interface MessageFlavouredApi<E extends Message> {\n\n\tshareWith(delegateId: string, message: E,\n\t\t\toptions?: { options?: MessageShareOptions | undefined }): Promise<E>;\n\n\tshareWithMany(message: E, delegates: { [ key: string ]: MessageShareOptions }): Promise<E>;\n\n\tfindMessagesByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<E>>;\n\n\tfilterMessagesBy(filter: FilterOptions<Message>): Promise<PaginatedListIterator<E>>;\n\n\tfilterMessagesBySorted(filter: SortableFilterOptions<Message>): Promise<PaginatedListIterator<E>>;\n\n\tundeleteMessage(message: Message): Promise<Message>;\n\n\tmodifyMessage(entity: E): Promise<E>;\n\n\tundeleteMessageById(id: string, rev: string): Promise<E>;\n\n\tgetMessage(entityId: string): Promise<E>;\n\n\tgetMessages(entityIds: Array<string>): Promise<Array<E>>;\n\n\tlistMessagesByTransportGuids(hcPartyId: string, transportGuids: Array<string>): Promise<Array<E>>;\n\n\tfindMessages(startKey: any | undefined, startDocumentId: string | undefined,\n\t\t\tlimit: number | undefined): Promise<PaginatedList<E>>;\n\n\tgetChildrenMessages(messageId: string): Promise<Array<E>>;\n\n\tgetMessagesChildren(messageIds: Array<string>): Promise<Array<E>>;\n\n\tlistMessagesByInvoices(invoiceIds: Array<string>): Promise<Array<E>>;\n\n\tfindMessagesByTransportGuid(transportGuid: string): Promise<PaginatedList<E>>;\n\n\tfindMessagesByTransportGuidSentDate(transportGuid: string, from: number, to: number,\n\t\t\toptions?: { startKey?: any | undefined, startDocumentId?: string | undefined, limit?: number | undefined, hcpId?: string | undefined }): Promise<PaginatedList<E>>;\n\n\tfindMessagesByToAddress(toAddress: string, startKey: any | undefined,\n\t\t\tstartDocumentId: string | undefined, limit: number | undefined): Promise<PaginatedList<E>>;\n\n\tfindMessagesByFromAddress(fromAddress: string, startKey: any | undefined,\n\t\t\tstartDocumentId: string | undefined, limit: number | undefined): Promise<PaginatedList<E>>;\n\n\tsetMessagesStatusBits(entityIds: Array<string>, statusBits: number): Promise<Array<E>>;\n\n\tsetMessagesReadStatus(entityIds: Array<string>, time: number | undefined, readStatus: boolean,\n\t\t\tuserId: string | undefined): Promise<Array<E>>;\n\n}\n"]}