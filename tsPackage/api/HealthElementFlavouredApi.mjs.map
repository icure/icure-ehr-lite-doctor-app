{"version":3,"file":"HealthElementFlavouredApi.mjs","sourceRoot":"","sources":["../../tsSourcesProject/api/HealthElementFlavouredApi.mts"],"names":[],"mappings":"","sourcesContent":["// auto-generated file\nimport {FilterOptions, PaginatedListIterator, SortableFilterOptions} from '../cardinal-sdk-ts.mjs';\nimport {HealthElementShareOptions} from '../crypto/entities/HealthElementShareOptions.mjs';\nimport {HealthElement} from '../model/HealthElement.mjs';\nimport {Patient} from '../model/Patient.mjs';\n\n\nexport interface HealthElementFlavouredApi<E extends HealthElement> {\n\n\tshareWith(delegateId: string, healthElement: E,\n\t\t\toptions?: { options?: HealthElementShareOptions | undefined }): Promise<E>;\n\n\tshareWithMany(healthElement: E,\n\t\t\tdelegates: { [ key: string ]: HealthElementShareOptions }): Promise<E>;\n\n\tfindHealthElementsByHcPartyPatient(hcPartyId: string, patient: Patient,\n\t\t\toptions?: { startDate?: number | undefined, endDate?: number | undefined, descending?: boolean | undefined }): Promise<PaginatedListIterator<E>>;\n\n\tfilterHealthElementsBy(filter: FilterOptions<HealthElement>): Promise<PaginatedListIterator<E>>;\n\n\tfilterHealthElementsBySorted(filter: SortableFilterOptions<HealthElement>): Promise<PaginatedListIterator<E>>;\n\n\tundeleteHealthElementById(id: string, rev: string): Promise<E>;\n\n\tundeleteHealthElement(healthElement: HealthElement): Promise<E>;\n\n\tmodifyHealthElement(entity: E): Promise<E>;\n\n\tmodifyHealthElements(entities: Array<E>): Promise<Array<E>>;\n\n\tgetHealthElement(entityId: string): Promise<E>;\n\n\tgetHealthElements(entityIds: Array<string>): Promise<Array<E>>;\n\n}\n"]}