{"version":3,"file":"CardinalSdk.mjs","sourceRoot":"","sources":["../../tsSourcesProject/sdk/CardinalSdk.mts"],"names":[],"mappings":";;;;;;;;;AA2BA,OAAO,EAAyB,uBAAuB,EAAC,MAAM,wBAAwB,CAAC;AAgJvF,MAAM,KAAW,WAAW,CAsF3B;AAtFD,WAAiB,WAAW;IAC1B;;;;;;;;;OASG;IACH,SAAsB,UAAU,CAC9B,aAAiC,EACjC,OAAe,EACf,oBAA0C,EAC1C,WAAmD,EACnD,OAAoB;;YAEpB,OAAO,MAAM,uBAAuB,CAAC,WAAW,EAAE,CAAC,aAAa,CAC9D,aAAa,EACb,OAAO,EACP,oBAAoB,EACpB,WAAW,EACX,OAAO,CACR,CAAA;QACH,CAAC;KAAA;IAdqB,sBAAU,aAc/B,CAAA;IAED;;;;;;;;;;;;;;;;;;OAkBG;IACH,SAAsB,qBAAqB,CACzC,aAAiC,EACjC,OAAe,EACf,iBAAyB,EACzB,sBAA8B,EAC9B,SAAiB,EACjB,eAAiD,EACjD,WAAmB,EACnB,cAA8B,EAC9B,WAAmD,EACnD,uCAAiF,EACjF,OAAoB;;YAEpB,OAAO,MAAM,uBAAuB,CAAC,WAAW,EAAE,CAAC,qBAAqB,CACtE,aAAa,EACb,OAAO,EACP,iBAAiB,EACjB,sBAAsB,EACtB,SAAS,EACT,eAAe,EACf,WAAW,EACX,cAAc,EACd,WAAW,EACX,uCAAuC,EACvC,OAAO,CACR,CAAA;QACH,CAAC;KAAA;IA1BqB,iCAAqB,wBA0B1C,CAAA;AAcH,CAAC,EAtFgB,WAAW,KAAX,WAAW,QAsF3B;AAED,MAAM,KAAW,eAAe,CAsB/B;AAtBD,WAAiB,eAAe;IAC9B;;;;;;;OAOG;IACH,SAAsB,UAAU,CAC9B,aAAiC,EACjC,OAAe,EACf,oBAA0C,EAC1C,OAAyB;;YAEzB,OAAO,MAAM,uBAAuB,CAAC,WAAW,EAAE,CAAC,cAAc,CAC/D,aAAa,EACb,OAAO,EACP,oBAAoB,EACpB,OAAO,CACR,CAAA;QACH,CAAC;KAAA;IAZqB,0BAAU,aAY/B,CAAA;AACH,CAAC,EAtBgB,eAAe,KAAf,eAAe,QAsB/B","sourcesContent":["import {AccessLogApi} from \"../api/AccessLogApi.mjs\";\nimport {CalendarItemApi} from \"../api/CalendarItemApi.mjs\";\nimport {ClassificationApi} from \"../api/ClassificationApi.mjs\";\nimport {ContactApi} from \"../api/ContactApi.mjs\";\nimport {DeviceApi} from \"../api/DeviceApi.mjs\";\nimport {DocumentApi} from \"../api/DocumentApi.mjs\";\nimport {FormApi} from \"../api/FormApi.mjs\";\nimport {HealthElementApi} from \"../api/HealthElementApi.mjs\";\nimport {InvoiceApi} from \"../api/InvoiceApi.mjs\";\nimport {MaintenanceTaskApi} from \"../api/MaintenanceTaskApi.mjs\";\nimport {MessageApi} from \"../api/MessageApi.mjs\";\nimport {PatientApi} from \"../api/PatientApi.mjs\";\nimport {PermissionApi} from \"../api/PermissionApi.mjs\";\nimport {ReceiptApi} from \"../api/ReceiptApi.mjs\";\nimport {TimeTableApi} from \"../api/TimeTableApi.mjs\";\nimport {TopicApi} from \"../api/TopicApi.mjs\";\nimport {CryptoApi} from \"../api/CryptoApi.mjs\";\nimport {DataOwnerApi} from \"../api/DataOwnerApi.mjs\";\nimport {UserApi} from \"../api/UserApi.mjs\";\nimport {CardinalMaintenanceTaskApi} from \"../api/CardinalMaintenanceTaskApi.mjs\";\nimport {RecoveryApi} from \"../api/RecoveryApi.mjs\";\nimport {\n  AuthenticationMethod,\n  AuthenticationProcessTelecomType,\n  AuthenticationProcessTemplateParameters\n} from \"../options/AuthenticationMethod.mjs\";\nimport {StorageFacade} from \"../storage/StorageFacade.mjs\";\nimport {CardinalStorageOptions, InternalSdkInitializers} from \"../cardinal-sdk-ts.mjs\";\nimport {SdkOptions, BasicSdkOptions} from \"../options/SdkOptions.mjs\";\nimport {ApplicationSettingsApi} from \"../api/ApplicationSettingsApi.mjs\";\nimport {CodeApi} from \"../api/CodeApi.mjs\";\nimport {DocumentTemplateApi} from \"../api/DocumentTemplateApi.mjs\";\nimport {EntityReferenceApi} from \"../api/EntityReferenceApi.mjs\";\nimport {EntityTemplateApi} from \"../api/EntityTemplateApi.mjs\";\nimport {FrontEndMigrationApi} from \"../api/FrontEndMigrationApi.mjs\";\nimport {GroupApi} from \"../api/GroupApi.mjs\";\nimport {HealthcarePartyApi} from \"../api/HealthcarePartyApi.mjs\";\nimport {SystemApi} from \"../api/SystemApi.mjs\";\nimport {InsuranceApi} from \"../api/InsuranceApi.mjs\";\nimport {KeywordApi} from \"../api/KeywordApi.mjs\";\nimport {PlaceApi} from \"../api/PlaceApi.mjs\";\nimport {RoleApi} from \"../api/RoleApi.mjs\";\nimport {TarificationApi} from \"../api/TarificationApi.mjs\";\nimport {AccessLogBasicApi} from \"../api/AccessLogBasicApi.mjs\";\nimport {CalendarItemBasicApi} from \"../api/CalendarItemBasicApi.mjs\";\nimport {ClassificationBasicApi} from \"../api/ClassificationBasicApi.mjs\";\nimport {ContactBasicApi} from \"../api/ContactBasicApi.mjs\";\nimport {DocumentBasicApi} from \"../api/DocumentBasicApi.mjs\";\nimport {FormBasicApi} from \"../api/FormBasicApi.mjs\";\nimport {HealthElementBasicApi} from \"../api/HealthElementBasicApi.mjs\";\nimport {InvoiceBasicApi} from \"../api/InvoiceBasicApi.mjs\";\nimport {MaintenanceTaskBasicApi} from \"../api/MaintenanceTaskBasicApi.mjs\";\nimport {MessageBasicApi} from \"../api/MessageBasicApi.mjs\";\nimport {PatientBasicApi} from \"../api/PatientBasicApi.mjs\";\nimport {ReceiptBasicApi} from \"../api/ReceiptBasicApi.mjs\";\nimport {TimeTableBasicApi} from \"../api/TimeTableBasicApi.mjs\";\nimport {TopicBasicApi} from \"../api/TopicBasicApi.mjs\";\nimport {AgendaApi} from \"../api/AgendaApi.mjs\";\nimport {MedicalLocationApi} from \"../api/MedicalLocationApi.mjs\";\nimport {CaptchaOptions} from \"../auth/CaptchaOptions.mjs\";\n\nexport interface CardinalApis {\n  readonly applicationSettings: ApplicationSettingsApi\n  readonly code: CodeApi\n  readonly device: DeviceApi\n  readonly documentTemplate: DocumentTemplateApi\n  readonly entityReference: EntityReferenceApi\n  readonly entityTemplate: EntityTemplateApi\n  readonly frontEndMigration: FrontEndMigrationApi\n  readonly group: GroupApi\n  readonly healthcareParty: HealthcarePartyApi\n  readonly system: SystemApi\n  readonly insurance: InsuranceApi\n  readonly keyword: KeywordApi\n  readonly permission: PermissionApi\n  readonly place: PlaceApi\n  readonly role: RoleApi\n  readonly tarification: TarificationApi\n  readonly user: UserApi\n  readonly medicalLocationApi: MedicalLocationApi\n  readonly agendaApi: AgendaApi\n  readonly accessLog: AccessLogApi\n  readonly calendarItem: CalendarItemApi\n  readonly classification: ClassificationApi\n  readonly contact: ContactApi\n  readonly document: DocumentApi\n  readonly form: FormApi\n  readonly healthElement: HealthElementApi\n  readonly invoice: InvoiceApi\n  readonly maintenanceTask: MaintenanceTaskApi\n  readonly message: MessageApi\n  readonly patient: PatientApi\n  readonly receipt: ReceiptApi\n  readonly timeTable: TimeTableApi\n  readonly topic: TopicApi\n  readonly crypto: CryptoApi\n  readonly recovery: RecoveryApi\n  readonly cardinalMaintenanceTask: CardinalMaintenanceTaskApi\n  readonly dataOwner: DataOwnerApi\n}\n\n/**\n * Main entry point to use iCure, provides access to the various apis with encryption capabilities.\n * Only data owner users with a valid keypair can use these apis.\n */\nexport interface CardinalSdk extends CardinalApis {\n  /**\n   * Get a new sdk using the same configurations and user authentication methods but for a different group.\n   * To use this method, the authentication method provided at initialization of this sdk must be valid also for the\n   * new group.\n   *\n   * @param groupId the id of the new group to switch to\n   * @return a new sdk for executing requests in the provided group\n   */\n  switchGroup(groupId: String): Promise<CardinalSdk>\n}\n\nexport interface CardinalBaseApis {\n  readonly applicationSettings: ApplicationSettingsApi\n  readonly code: CodeApi\n  readonly device: DeviceApi\n  readonly documentTemplate: DocumentTemplateApi\n  readonly entityReference: EntityReferenceApi\n  readonly entityTemplate: EntityTemplateApi\n  readonly frontEndMigration: FrontEndMigrationApi\n  readonly group: GroupApi\n  readonly healthcareParty: HealthcarePartyApi\n  readonly system: SystemApi\n  readonly insurance: InsuranceApi\n  readonly keyword: KeywordApi\n  readonly permission: PermissionApi\n  readonly place: PlaceApi\n  readonly role: RoleApi\n  readonly tarification: TarificationApi\n  readonly user: UserApi\n  readonly medicalLocationApi: MedicalLocationApi\n  readonly agendaApi: AgendaApi\n  readonly accessLog: AccessLogBasicApi\n  readonly calendarItem: CalendarItemBasicApi\n  readonly classification: ClassificationBasicApi\n  readonly contact: ContactBasicApi\n  readonly document: DocumentBasicApi\n  readonly form: FormBasicApi\n  readonly healthElement: HealthElementBasicApi\n  readonly invoice: InvoiceBasicApi\n  readonly maintenanceTask: MaintenanceTaskBasicApi\n  readonly message: MessageBasicApi\n  readonly patient: PatientBasicApi\n  readonly receipt: ReceiptBasicApi\n  readonly timeTable: TimeTableBasicApi\n  readonly topic: TopicBasicApi\n\n}\n\n/**\n * A stripped down version of the iCure SDK that can be used also by users that aren't data owners.\n * This could be useful, for example, if you want to perform some system maintenance using an admin user, or compile\n * some statistics without using any encrypted information\n */\nexport interface CardinalBaseSdk extends CardinalBaseApis {\n  /**\n   * Get a new sdk using the same configurations and user authentication methods but for a different group.\n   * To use this method, the authentication method provided at initialization of this sdk must be valid also for the\n   * new group.\n   *\n   * @param groupId the id of the new group to switch to\n   * @return a new sdk for executing requests in the provided group\n   */\n  switchGroup(groupId: string): Promise<CardinalBaseSdk>\n}\n\nexport namespace CardinalSdk {\n  /**\n   * Initialize a new instance of the icure sdk for a specific user.\n   *\n   * @param applicationId a string to uniquely identify your iCure application.\n   * @param baseUrl the url of the iCure backend to use\n   * @param authenticationMethod specifies how the sdk should authenticate.\n   * @param baseStorage an implementation of {@link StorageFacade} or standard icure storage options, used for persistent\n   * storage of various information including the user keys if {@link SdkOptions.keyStorage}1 is not provided.\n   * @param options optional parameters for the initialization of the sdk.\n   */\n  export async function initialize(\n    applicationId: string | undefined,\n    baseUrl: string,\n    authenticationMethod: AuthenticationMethod,\n    baseStorage: StorageFacade | CardinalStorageOptions,\n    options?: SdkOptions\n  ): Promise<CardinalSdk> {\n    return await InternalSdkInitializers.getInstance().initializeSdk(\n      applicationId,\n      baseUrl,\n      authenticationMethod,\n      baseStorage,\n      options\n    )\n  }\n\n  /**\n   * Initialize a new instance of the icure sdk for a specific user.\n   * The authentication will be performed through an authentication process.\n   *\n   * @param applicationId a string to uniquely identify your iCure application.\n   * @param baseUrl the url of the iCure backend to use\n   * @param messageGatewayUrl the url of the iCure message gateway you want to use. Usually this should be\n   * @param externalServicesSpecId an identifier that allows the message gateway to connect the request to your\n   * services for email / sms communication of the process tokens.\n   * @param processId the id of the process you want to execute.\n   * @param userTelecomType the type of telecom number used for the user.\n   * @param userTelecom the telecom number of the user for which you want to execute the process. This should be an\n   * email address or phone number depending on the type of process you are executing.\n   * @param captchaOptions the captcha options\n   * @param baseStorage an implementation of the [StorageFacade], used for persistent storage of various\n   * information including the user keys if [ApiOptions.keyStorage] is not provided.\n   * @param authenticationProcessTemplateParameters optional parameters which may be used by sms/email templates.\n   * @param options optional parameters for the initialization of the sdk.\n   */\n  export async function initializeWithProcess(\n    applicationId: string | undefined,\n    baseUrl: string,\n    messageGatewayUrl: string,\n    externalServicesSpecId: string,\n    processId: string,\n    userTelecomType: AuthenticationProcessTelecomType,\n    userTelecom: string,\n    captchaOptions: CaptchaOptions,\n    baseStorage: StorageFacade | CardinalStorageOptions,\n    authenticationProcessTemplateParameters?: AuthenticationProcessTemplateParameters,\n    options?: SdkOptions\n  ): Promise<AuthenticationWithProcessStep> {\n    return await InternalSdkInitializers.getInstance().initializeWithProcess(\n      applicationId,\n      baseUrl,\n      messageGatewayUrl,\n      externalServicesSpecId,\n      processId,\n      userTelecomType,\n      userTelecom,\n      captchaOptions,\n      baseStorage,\n      authenticationProcessTemplateParameters,\n      options,\n    )\n  }\n\n  /**\n   * Represents an intermediate stage in the initialization of an SDK through an authentication process\n   * The initialization can complete only after the user provides the validation code received via email/sms.\n   */\n  export interface AuthenticationWithProcessStep {\n    /**\n     * Complete the authentication of the user and finishes the initialization of the SDK.\n     * In case the provided validation code is wrong this method will throw an exception, but it is still possible\n     * to call to re-attempt authentication by calling this method with a different validation code.\n     */\n    completeAuthentication(validationCode: String): Promise<CardinalSdk>\n  }\n}\n\nexport namespace CardinalBaseSdk {\n  /**\n   * Initialize a new instance of the icure sdk for a specific user.\n   *\n   * @param applicationId a string to uniquely identify your iCure application.\n   * @param baseUrl the url of the iCure backend to use\n   * @param authenticationMethod specifies how the sdk should authenticate.\n   * @param options optional parameters for the initialization of the sdk.\n   */\n  export async function initialize(\n    applicationId: string | undefined,\n    baseUrl: string,\n    authenticationMethod: AuthenticationMethod,\n    options?: BasicSdkOptions\n  ): Promise<CardinalBaseSdk> {\n    return await InternalSdkInitializers.getInstance().initializeBase(\n      applicationId,\n      baseUrl,\n      authenticationMethod,\n      options\n    )\n  }\n}"]}