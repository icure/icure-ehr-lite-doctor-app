{"version":3,"file":"TypedValue.mjs","sourceRoot":"","sources":["../../../tsSourcesProject/model/embed/TypedValue.mts"],"names":[],"mappings":"AAwBA,MAAM,OAAO,mBAAmB;IAkB/B,YAAY,OAAqC;QAhBjD,SAAI,GAAgC,SAAS,CAAC;QAE9C,iBAAY,GAAwB,SAAS,CAAC;QAE9C,iBAAY,GAAuB,SAAS,CAAC;QAE7C,gBAAW,GAAuB,SAAS,CAAC;QAE5C,gBAAW,GAAuB,SAAS,CAAC;QAE5C,cAAS,GAAuB,SAAS,CAAC;QAE1C,kBAAa,GAA6B,SAAS,CAAC;QAE3C,gBAAW,GAAU,KAAK,CAAC;QAGnC,IAAI,OAAO,CAAC,WAAW,KAAK,SAAS,IAAI,OAAO,CAAC,WAAW,KAAK,KAAK;YAAE,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;QAC1I,IAAI,MAAM,IAAI,OAAO;YAAE,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAChD,IAAI,cAAc,IAAI,OAAO;YAAE,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;QACxE,IAAI,cAAc,IAAI,OAAO;YAAE,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;QACxE,IAAI,aAAa,IAAI,OAAO;YAAE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACrE,IAAI,aAAa,IAAI,OAAO;YAAE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACrE,IAAI,WAAW,IAAI,OAAO;YAAE,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QAC/D,IAAI,eAAe,IAAI,OAAO;YAAE,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAC5E,CAAC;CAED;AAED,MAAM,OAAO,mBAAmB;IAkB/B,YAAY,OAAqC;QAhBjD,SAAI,GAAgC,SAAS,CAAC;QAE9C,iBAAY,GAAwB,SAAS,CAAC;QAE9C,iBAAY,GAAuB,SAAS,CAAC;QAE7C,gBAAW,GAAuB,SAAS,CAAC;QAE5C,gBAAW,GAAuB,SAAS,CAAC;QAE5C,cAAS,GAAuB,SAAS,CAAC;QAE1C,kBAAa,GAA6B,SAAS,CAAC;QAE3C,gBAAW,GAAS,IAAI,CAAC;QAGjC,IAAI,OAAO,CAAC,WAAW,KAAK,SAAS,IAAI,OAAO,CAAC,WAAW,KAAK,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;QACxI,IAAI,MAAM,IAAI,OAAO;YAAE,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAChD,IAAI,cAAc,IAAI,OAAO;YAAE,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;QACxE,IAAI,cAAc,IAAI,OAAO;YAAE,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;QACxE,IAAI,aAAa,IAAI,OAAO;YAAE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACrE,IAAI,aAAa,IAAI,OAAO;YAAE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACrE,IAAI,WAAW,IAAI,OAAO;YAAE,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QAC/D,IAAI,eAAe,IAAI,OAAO;YAAE,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAC5E,CAAC;CAED","sourcesContent":["// auto-generated file\nimport {Base64String} from '../specializations/Base64String.mjs';\nimport {Encryptable} from './Encryptable.mjs';\nimport {TypedValuesType} from './TypedValuesType.mjs';\n\n\nexport interface TypedValue extends Encryptable {\n\n\ttype: TypedValuesType | undefined;\n\n\tbooleanValue: boolean | undefined;\n\n\tintegerValue: number | undefined;\n\n\tdoubleValue: number | undefined;\n\n\tstringValue: string | undefined;\n\n\tdateValue: number | undefined;\n\n\treadonly isEncrypted: boolean;\n\n}\n\nexport class DecryptedTypedValue {\n\n\ttype: TypedValuesType | undefined = undefined;\n\n\tbooleanValue: boolean | undefined = undefined;\n\n\tintegerValue: number | undefined = undefined;\n\n\tdoubleValue: number | undefined = undefined;\n\n\tstringValue: string | undefined = undefined;\n\n\tdateValue: number | undefined = undefined;\n\n\tencryptedSelf: Base64String | undefined = undefined;\n\n\treadonly isEncrypted: false = false;\n\n\tconstructor(partial: Partial<DecryptedTypedValue>) {\n\t\tif (partial.isEncrypted !== undefined && partial.isEncrypted !== false) throw new Error('partial.isEncrypted must be undefined or false');\n\t\tif ('type' in partial) this.type = partial.type;\n\t\tif ('booleanValue' in partial) this.booleanValue = partial.booleanValue;\n\t\tif ('integerValue' in partial) this.integerValue = partial.integerValue;\n\t\tif ('doubleValue' in partial) this.doubleValue = partial.doubleValue;\n\t\tif ('stringValue' in partial) this.stringValue = partial.stringValue;\n\t\tif ('dateValue' in partial) this.dateValue = partial.dateValue;\n\t\tif ('encryptedSelf' in partial) this.encryptedSelf = partial.encryptedSelf;\n\t}\n\n}\n\nexport class EncryptedTypedValue {\n\n\ttype: TypedValuesType | undefined = undefined;\n\n\tbooleanValue: boolean | undefined = undefined;\n\n\tintegerValue: number | undefined = undefined;\n\n\tdoubleValue: number | undefined = undefined;\n\n\tstringValue: string | undefined = undefined;\n\n\tdateValue: number | undefined = undefined;\n\n\tencryptedSelf: Base64String | undefined = undefined;\n\n\treadonly isEncrypted: true = true;\n\n\tconstructor(partial: Partial<EncryptedTypedValue>) {\n\t\tif (partial.isEncrypted !== undefined && partial.isEncrypted !== true) throw new Error('partial.isEncrypted must be undefined or true');\n\t\tif ('type' in partial) this.type = partial.type;\n\t\tif ('booleanValue' in partial) this.booleanValue = partial.booleanValue;\n\t\tif ('integerValue' in partial) this.integerValue = partial.integerValue;\n\t\tif ('doubleValue' in partial) this.doubleValue = partial.doubleValue;\n\t\tif ('stringValue' in partial) this.stringValue = partial.stringValue;\n\t\tif ('dateValue' in partial) this.dateValue = partial.dateValue;\n\t\tif ('encryptedSelf' in partial) this.encryptedSelf = partial.encryptedSelf;\n\t}\n\n}\n"]}