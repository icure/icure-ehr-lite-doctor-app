{"version":3,"file":"PatientHealthCareParty.mjs","sourceRoot":"","sources":["../../../tsSourcesProject/model/embed/PatientHealthCareParty.mts"],"names":[],"mappings":"AAwBA,MAAM,OAAO,+BAA+B;IAgB3C,YAAY,OAAiD;QAd7D,SAAI,GAA2C,SAAS,CAAC;QAEzD,sBAAiB,GAAuB,SAAS,CAAC;QAElD,gBAAW,GAAwC,EAAE,CAAC;QAEtD,oBAAe,GAA0B,EAAE,CAAC;QAE5C,aAAQ,GAAY,KAAK,CAAC;QAE1B,kBAAa,GAA6B,SAAS,CAAC;QAE3C,gBAAW,GAAU,KAAK,CAAC;QAGnC,IAAI,OAAO,CAAC,WAAW,KAAK,SAAS,IAAI,OAAO,CAAC,WAAW,KAAK,KAAK;YAAE,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;QAC1I,IAAI,MAAM,IAAI,OAAO;YAAE,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAChD,IAAI,mBAAmB,IAAI,OAAO;YAAE,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACvF,IAAI,aAAa,IAAI,OAAO,IAAI,OAAO,CAAC,WAAW,KAAK,SAAS;YAAE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QAC1G,IAAI,iBAAiB,IAAI,OAAO,IAAI,OAAO,CAAC,eAAe,KAAK,SAAS;YAAE,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;QAC1H,IAAI,UAAU,IAAI,OAAO,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS;YAAE,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QAC9F,IAAI,eAAe,IAAI,OAAO;YAAE,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAC5E,CAAC;CAED;AAED,MAAM,OAAO,+BAA+B;IAgB3C,YAAY,OAAiD;QAd7D,SAAI,GAA2C,SAAS,CAAC;QAEzD,sBAAiB,GAAuB,SAAS,CAAC;QAElD,gBAAW,GAAwC,EAAE,CAAC;QAEtD,oBAAe,GAA0B,EAAE,CAAC;QAE5C,aAAQ,GAAY,KAAK,CAAC;QAE1B,kBAAa,GAA6B,SAAS,CAAC;QAE3C,gBAAW,GAAS,IAAI,CAAC;QAGjC,IAAI,OAAO,CAAC,WAAW,KAAK,SAAS,IAAI,OAAO,CAAC,WAAW,KAAK,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;QACxI,IAAI,MAAM,IAAI,OAAO;YAAE,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAChD,IAAI,mBAAmB,IAAI,OAAO;YAAE,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACvF,IAAI,aAAa,IAAI,OAAO,IAAI,OAAO,CAAC,WAAW,KAAK,SAAS;YAAE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QAC1G,IAAI,iBAAiB,IAAI,OAAO,IAAI,OAAO,CAAC,eAAe,KAAK,SAAS;YAAE,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;QAC1H,IAAI,UAAU,IAAI,OAAO,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS;YAAE,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QAC9F,IAAI,eAAe,IAAI,OAAO;YAAE,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAC5E,CAAC;CAED","sourcesContent":["// auto-generated file\nimport {Base64String} from '../specializations/Base64String.mjs';\nimport {Encryptable} from './Encryptable.mjs';\nimport {PatientHealthCarePartyType} from './PatientHealthCarePartyType.mjs';\nimport {ReferralPeriod} from './ReferralPeriod.mjs';\nimport {TelecomType} from './TelecomType.mjs';\n\n\nexport interface PatientHealthCareParty extends Encryptable {\n\n\ttype: PatientHealthCarePartyType | undefined;\n\n\thealthcarePartyId: string | undefined;\n\n\tsendFormats: { [ key in TelecomType ]?: string };\n\n\treferralPeriods: Array<ReferralPeriod>;\n\n\treferral: boolean;\n\n\treadonly isEncrypted: boolean;\n\n}\n\nexport class DecryptedPatientHealthCareParty {\n\n\ttype: PatientHealthCarePartyType | undefined = undefined;\n\n\thealthcarePartyId: string | undefined = undefined;\n\n\tsendFormats: { [ key in TelecomType ]?: string } = {};\n\n\treferralPeriods: Array<ReferralPeriod> = [];\n\n\treferral: boolean = false;\n\n\tencryptedSelf: Base64String | undefined = undefined;\n\n\treadonly isEncrypted: false = false;\n\n\tconstructor(partial: Partial<DecryptedPatientHealthCareParty>) {\n\t\tif (partial.isEncrypted !== undefined && partial.isEncrypted !== false) throw new Error('partial.isEncrypted must be undefined or false');\n\t\tif ('type' in partial) this.type = partial.type;\n\t\tif ('healthcarePartyId' in partial) this.healthcarePartyId = partial.healthcarePartyId;\n\t\tif ('sendFormats' in partial && partial.sendFormats !== undefined) this.sendFormats = partial.sendFormats;\n\t\tif ('referralPeriods' in partial && partial.referralPeriods !== undefined) this.referralPeriods = partial.referralPeriods;\n\t\tif ('referral' in partial && partial.referral !== undefined) this.referral = partial.referral;\n\t\tif ('encryptedSelf' in partial) this.encryptedSelf = partial.encryptedSelf;\n\t}\n\n}\n\nexport class EncryptedPatientHealthCareParty {\n\n\ttype: PatientHealthCarePartyType | undefined = undefined;\n\n\thealthcarePartyId: string | undefined = undefined;\n\n\tsendFormats: { [ key in TelecomType ]?: string } = {};\n\n\treferralPeriods: Array<ReferralPeriod> = [];\n\n\treferral: boolean = false;\n\n\tencryptedSelf: Base64String | undefined = undefined;\n\n\treadonly isEncrypted: true = true;\n\n\tconstructor(partial: Partial<EncryptedPatientHealthCareParty>) {\n\t\tif (partial.isEncrypted !== undefined && partial.isEncrypted !== true) throw new Error('partial.isEncrypted must be undefined or true');\n\t\tif ('type' in partial) this.type = partial.type;\n\t\tif ('healthcarePartyId' in partial) this.healthcarePartyId = partial.healthcarePartyId;\n\t\tif ('sendFormats' in partial && partial.sendFormats !== undefined) this.sendFormats = partial.sendFormats;\n\t\tif ('referralPeriods' in partial && partial.referralPeriods !== undefined) this.referralPeriods = partial.referralPeriods;\n\t\tif ('referral' in partial && partial.referral !== undefined) this.referral = partial.referral;\n\t\tif ('encryptedSelf' in partial) this.encryptedSelf = partial.encryptedSelf;\n\t}\n\n}\n"]}